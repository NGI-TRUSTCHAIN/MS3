name: Run on Issue Closed
on:
  issues:
    types:
      - closed
jobs:
  validate-closure:
    runs-on: ubuntu-latest
    steps:
      - name: Check authorized user and label
        uses: actions/github-script@v7
        id: check
        with:
          script: |
            const authorizedUsers = ['AngelaHerrador', 'Gunner Andersen Gil'];
            const actor = context.actor;
            const labels = context.payload.issue.labels.map(l => l.name);
            const hasLabel = labels.includes('Approved');

            if (!authorizedUsers.includes(actor)) {
              core.setFailed(`❌ @${actor} no está autorizado para cerrar issues.`);
            }

            if (!hasLabel) {
              core.setFailed(`❌ La issue debe tener la etiqueta 'In proccess'.`);
            }

  handle-closed-issue:
    needs: validate-closure
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Log info
        run: |
          echo "La issue '${{ github.event.issue.title }}' fue cerrada por ${{ github.actor }}"
      
  sync-to-azure:
    runs-on: ubuntu-latest
    env:
      PAT: ${{ secrets.AZURE_DEVOPS_M3S_TOKEN }}
      ORG: "changetheblock"
      PROJECT: "M3S"
      REPO_NAME: "M3S"
      AZURE_DEVOPS_URL: ${{ secrets.AZURE_DEVOPS_M3S_URL }}
    steps:
      - name: Checkout GitHub repo
        uses: actions/checkout@v3
      - name: Set up Git
        run: |
          git config --global user.email '${{ secrets.AZURE_DEVOPS_M3S_EMAIL }}'
          git config --global user.name "Soporte Changetheblock"
      - name: Extract branch name
        id: extract_branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - name: Clone Azure DevOps repo and create new branch
        run: |
          BRANCH_NAME="${{ steps.extract_branch.outputs.branch_name }}"
          echo "Branch to sync: $BRANCH_NAME"
          git clone https://:$PAT@dev.azure.com/$ORG/$PROJECT/_git/$REPO_NAME azure-repo
          cd azure-repo
          git checkout origin/main -b "$BRANCH_NAME"
          rsync -av --exclude='.git' ../ ./
          git add .
          git commit -m "Sync branch $BRANCH_NAME from GitHub" || echo "No changes to commit"
          git push origin "$BRANCH_NAME"
      - name: Create Pull Request in Azure DevOps
        run: |
          BRANCH_NAME="${{ steps.extract_branch.outputs.branch_name }}"
          echo "Creating PR from $BRANCH_NAME to main"
          API_URL="$AZURE_DEVOPS_URL/$PROJECT/_apis/git/repositories/$REPO_NAME/pullrequests?api-version=7.1-preview.1"
          curl -u :$PAT \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"sourceRefName\": \"refs/heads/$BRANCH_NAME\",
              \"targetRefName\": \"refs/heads/main\",
              \"title\": \"Sync PR from GitHub: $BRANCH_NAME\",
              \"description\": \"Auto-generated PR from GitHub branch $BRANCH_NAME.\"
            }" \
            $API_URL