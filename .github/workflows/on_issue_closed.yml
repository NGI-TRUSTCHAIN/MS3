name: Run on Issue Closed
on:
  issues:
    types:
      - closed

jobs:
  validate-closure:
    runs-on: ubuntu-latest
    steps:
      - name: Check authorized user and label
        uses: actions/github-script@v7
        id: check
        with:
          script: |
            const authorizedUsers = ['AngelaHerrador', 'GunnerAg'];
            const actor = context.actor;
            const labels = context.payload.issue.labels.map(l => l.name);
            const hasLabel = labels.includes('Approved');

            if (!authorizedUsers.includes(actor)) {
              core.setFailed(`❌ @${actor} no está autorizado para cerrar issues.`);
            }

            if (!hasLabel) {
              core.setFailed(`❌ La issue debe tener la etiqueta 'Approved'.`);
            }

  handle-closed-issue:
    needs: validate-closure
    if: success()
    runs-on: ubuntu-latest
    env:
      PAT: ${{ secrets.AZURE_DEVOPS_M3S_TOKEN }}
      ORG: "changetheblock"
      PROJECT: "M3S"
      REPO_NAME: "M3S"
      AZURE_DEVOPS_URL: "https://dev.azure.com/changetheblock"
    steps:
      - name: Log info
        run: |
          echo "La issue '${{ github.event.issue.title }}' fue cerrada por ${{ github.actor }}"
      - name: Checkout GitHub repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.email '${{ secrets.AZURE_DEVOPS_M3S_EMAIL }}'
          git config --global user.name "Soporte Changetheblock"

      # THIS STEP IS REPLACED WITH THE CORRECT, IDENTICAL LOGIC
      - name: Sanitize and Extract branch name from issue
        id: extract_branch
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/--\+/-/g' -e 's/^-//' -e 's/-$//')
          BRANCH_NAME="${ISSUE_NUMBER}-${SANITIZED_TITLE}"
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      # THIS IS THE ONLY CHECKOUT STEP NEEDED
      - name: Checkout GitHub feature branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.extract_branch.outputs.branch_name }}
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.email '${{ secrets.AZURE_DEVOPS_M3S_EMAIL }}'
          git config --global user.name "Soporte Changetheblock"

      - name: Push feature branch to Azure DevOps
        run: |
          BRANCH_NAME="${{ steps.extract_branch.outputs.branch_name }}"
          git remote add azure "https://:$PAT@dev.azure.com/$ORG/$PROJECT/_git/$REPO_NAME"
          git push azure "refs/heads/$BRANCH_NAME:refs/heads/$BRANCH_NAME" --force

      - name: Create Pull Request in Azure DevOps
        run: |
          BRANCH_NAME="${{ steps.extract_branch.outputs.branch_name }}"
          echo "Creating PR from $BRANCH_NAME to main"
          API_URL="$AZURE_DEVOPS_URL/$PROJECT/_apis/git/repositories/$REPO_NAME/pullrequests?api-version=7.1-preview.1"
          curl -u :$PAT \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"sourceRefName\": \"refs/heads/$BRANCH_NAME\",
              \"targetRefName\": \"refs/heads/main\",
              \"title\": \"Sync PR from GitHub: ${{ github.event.issue.title }}\",
              \"description\": \"Auto-generated PR from GitHub issue #${{ github.event.issue.number }}.\"
            }" \
            $API_URL