"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@m3s";
exports.ids = ["vendor-chunks/@m3s"];
exports.modules = {

/***/ "(ssr)/./node_modules/@m3s/wallet/dist/index.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/@m3s/wallet/dist/index.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdapterError: () => (/* binding */ AdapterError),\n/* harmony export */   NetworkHelper: () => (/* binding */ NetworkHelper),\n/* harmony export */   NonceType: () => (/* binding */ NonceType),\n/* harmony export */   PrivateKeyHelper: () => (/* binding */ PrivateKeyHelper),\n/* harmony export */   RuntimeEnvironment: () => (/* binding */ RuntimeEnvironment),\n/* harmony export */   WalletErrorCode: () => (/* binding */ WalletErrorCode),\n/* harmony export */   WalletEvent: () => (/* binding */ WalletEvent),\n/* harmony export */   WalletType: () => (/* binding */ WalletType),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   registry: () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/wallet/wallet.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/wallet/hdwallet.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/hash/message.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/hash/typed-data.js\");\n/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! joi */ \"(ssr)/./node_modules/joi/lib/index.js\");\n/* harmony import */ var _web3auth_no_modal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @web3auth/no-modal */ \"(ssr)/./node_modules/@web3auth/no-modal/dist/lib.esm/noModal.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/lib.esm/wallet/index.js\");\n/* harmony import */ var _web3auth_auth_adapter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @web3auth/auth-adapter */ \"(ssr)/./node_modules/@web3auth/auth-adapter/dist/lib.esm/authAdapter.js\");\n/* harmony import */ var _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @web3auth/ethereum-provider */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/dist/lib.esm/providers/privateKeyProviders/EthereumPrivateKeyProvider.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// packages/wallet/package.json\nvar package_default = {\n  name: \"@m3s/wallet\",\n  version: \"2.4.3\",\n  type: \"module\",\n  description: \"A flexible wallet interface supporting multiple blockchain wallet types, including EVM wallets and Web3Auth integration\",\n  license: \"MIT\",\n  keywords: [\n    \"wallet\",\n    \"ethereum\",\n    \"web3auth\",\n    \"blockchain\",\n    \"evm\",\n    \"oauth\",\n    \"crypto\",\n    \"web3\"\n  ],\n  repository: {\n    type: \"git\",\n    url: \"git@bitbucket.org:ctb-marisca/ms3-package.git\",\n    directory: \"packages/wallet\"\n  },\n  main: \"./dist/index.cjs.js\",\n  module: \"./dist/index.esm.js\",\n  types: \"./dist/index.d.ts\",\n  exports: {\n    \".\": {\n      types: \"./dist/index.d.ts\",\n      import: \"./dist/index.esm.js\",\n      require: \"./dist/index.cjs.js\"\n    }\n  },\n  scripts: {\n    build: \"tsc -b\",\n    prepublishOnly: \"npm run build\",\n    test: \"vitest run --sequence.sequential\"\n  },\n  dependencies: {\n    ethers: \"^6.13.5\",\n    joi: \"^17.13.3\"\n  },\n  devDependencies: {\n    \"@m3s/shared\": \"*\"\n  },\n  peerDependencies: {\n    \"@web3auth/auth-adapter\": \"9.7.0\",\n    \"@web3auth/base\": \"9.7.0\",\n    \"@web3auth/ethereum-provider\": \"9.7.0\",\n    \"@web3auth/no-modal\": \"9.7.0\"\n  },\n  peerDependenciesMeta: {\n    \"@web3auth/auth-adapter\": {\n      optional: true\n    },\n    \"@web3auth/base\": {\n      optional: true\n    },\n    \"@web3auth/ethereum-provider\": {\n      optional: true\n    },\n    \"@web3auth/no-modal\": {\n      optional: true\n    }\n  },\n  publishConfig: {\n    access: \"public\",\n    tag: \"latest\"\n  },\n  files: [\n    \"dist\"\n  ],\n  engines: {\n    node: \">=18.0.0\"\n  }\n};\n\n// packages/shared/dist/errors/AdapterError.js\nvar AdapterError = class extends Error {\n  // Add this line\n  constructor(message, options) {\n    super(message);\n    __publicField(this, \"code\");\n    __publicField(this, \"cause\");\n    __publicField(this, \"methodName\");\n    __publicField(this, \"details\");\n    this.name = this.constructor.name;\n    this.code = options?.code;\n    this.cause = options?.cause;\n    this.methodName = options?.methodName;\n    this.details = options?.details;\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n};\n\n// packages/shared/dist/registry/capability.js\nvar Capability;\n(function(Capability2) {\n  Capability2[\"CoreWallet\"] = \"ICoreWallet\";\n  Capability2[\"EventEmitter\"] = \"IEventEmitter\";\n  Capability2[\"MessageSigner\"] = \"IMessageSigner\";\n  Capability2[\"TransactionHandler\"] = \"ITransactionHandler\";\n  Capability2[\"TypedDataSigner\"] = \"ITypedDataSigner\";\n  Capability2[\"GasEstimation\"] = \"IGasEstimation\";\n  Capability2[\"TokenOperations\"] = \"ITokenOperations\";\n  Capability2[\"RPCHandler\"] = \"IRPCHandler\";\n  Capability2[\"TransactionStatus\"] = \"ITransactionStatus\";\n  Capability2[\"ContractGenerator\"] = \"IContractGenerator\";\n  Capability2[\"ContractCompiler\"] = \"IContractCompiler\";\n  Capability2[\"QuoteProvider\"] = \"IQuoteProvider\";\n  Capability2[\"OperationHandler\"] = \"IOperationHandler\";\n  Capability2[\"ChainDiscovery\"] = \"IChainDiscovery\";\n  Capability2[\"GasEstimator\"] = \"IGasEstimator\";\n  Capability2[\"OperationMaintenance\"] = \"IOperationMaintenance\";\n  Capability2[\"AdapterIdentity\"] = \"IAdapterIdentity\";\n  Capability2[\"AdapterLifecycle\"] = \"IAdapterLifecycle\";\n})(Capability || (Capability = {}));\nvar MethodToCapabilityMap = {\n  // --- ICoreWallet ---\n  \"getAccounts\": Capability.CoreWallet,\n  \"getBalance\": Capability.CoreWallet,\n  \"getNetwork\": Capability.CoreWallet,\n  \"setProvider\": Capability.CoreWallet,\n  \"disconnect\": Capability.CoreWallet,\n  \"isConnected\": Capability.CoreWallet,\n  // --- ITransactionHandler ---\n  \"sendTransaction\": Capability.TransactionHandler,\n  // --- IMessageSigner ---\n  \"signMessage\": Capability.MessageSigner,\n  // --- ITypedDataSigner ---\n  \"signTypedData\": Capability.TypedDataSigner,\n  // --- IGasEstimation ---\n  \"estimateGas\": Capability.GasEstimation,\n  // --- IEventEmitter ---\n  \"on\": Capability.EventEmitter,\n  \"off\": Capability.EventEmitter,\n  \"emit\": Capability.EventEmitter,\n  // --- ITokenOperations ---\n  \"callContract\": Capability.TokenOperations,\n  // --- IRPCHandler ---\n  \"getChainId\": Capability.RPCHandler,\n  \"getGasPrice\": Capability.RPCHandler,\n  \"getBlockNumber\": Capability.RPCHandler,\n  // --- ITransactionStatus ---\n  \"getTransaction\": Capability.TransactionStatus,\n  \"waitForTransaction\": Capability.TransactionStatus,\n  // --- IContractGenerator ---\n  \"generate\": Capability.ContractGenerator,\n  // --- IContractCompiler ---\n  \"compile\": Capability.ContractCompiler,\n  // --- IQuoteProvider ---\n  \"getOperationQuote\": Capability.QuoteProvider,\n  // --- IOperations ---\n  \"executeOperation\": Capability.OperationHandler,\n  \"getOperationStatus\": Capability.OperationHandler,\n  \"cancelOperation\": Capability.OperationHandler,\n  \"resumeOperation\": Capability.OperationHandler,\n  // --- IChainDiscovery ---\n  \"getSupportedChains\": Capability.ChainDiscovery,\n  \"getSupportedTokens\": Capability.ChainDiscovery,\n  // --- IGasEstimator ---\n  \"getGasOnDestination\": Capability.GasEstimator,\n  // --- IOperationMaintenance ---\n  \"checkForTimedOutOperations\": Capability.OperationMaintenance,\n  // --- IAdapterLifecycle ---\n  \"initialize\": Capability.AdapterLifecycle,\n  \"isInitialized\": Capability.AdapterLifecycle\n};\n\n// packages/shared/dist/errors/proxy.js\nfunction createErrorHandlingProxy(adapterInstance, capabilities, errorMap = {}, defaultErrorCode, contextName = \"UnknownAdapter\") {\n  return new Proxy(adapterInstance, {\n    get(target, prop, receiver) {\n      const originalValue = Reflect.get(target, prop, receiver);\n      const methodName = String(prop);\n      if (typeof originalValue === \"function\") {\n        const requiredCapability = MethodToCapabilityMap[methodName];\n        if (requiredCapability && !capabilities.includes(requiredCapability)) {\n          return () => {\n            throw new AdapterError(`Method '${methodName}' is not supported by ${contextName}. It lacks the required capability: '${requiredCapability}'.`, { code: \"METHOD_NOT_SUPPORTED\", methodName });\n          };\n        }\n        const isAsync = originalValue.constructor.name === \"AsyncFunction\";\n        const handleError = (error) => {\n          const originalErrorMessage = error instanceof Error ? error.message : String(error);\n          console.error(`[${contextName} Error] Method '${methodName}' failed: ${originalErrorMessage}`, error);\n          if (error instanceof AdapterError) {\n            throw error;\n          }\n          let mappedErrorCode = defaultErrorCode;\n          for (const key in errorMap) {\n            if (originalErrorMessage.includes(key)) {\n              mappedErrorCode = errorMap[key];\n              break;\n            }\n          }\n          throw new AdapterError(`${contextName} method '${methodName}' failed: ${originalErrorMessage}`, {\n            cause: error,\n            methodName,\n            code: mappedErrorCode\n          });\n        };\n        if (isAsync) {\n          return async function(...args) {\n            try {\n              return await originalValue.apply(target, args);\n            } catch (error) {\n              handleError(error);\n            }\n          };\n        } else {\n          return function(...args) {\n            try {\n              return originalValue.apply(target, args);\n            } catch (error) {\n              handleError(error);\n            }\n          };\n        }\n      }\n      return originalValue;\n    }\n  });\n}\n\n// packages/shared/dist/types/error.js\nvar WalletErrorCode;\n(function(WalletErrorCode2) {\n  WalletErrorCode2[\"Unknown\"] = \"UNKNOWN\";\n  WalletErrorCode2[\"environment\"] = \"ENVIRONMENT_MISMATCH\";\n  WalletErrorCode2[\"NotImplemented\"] = \"NOT_IMPLEMENTED\";\n  WalletErrorCode2[\"AdapterNotInitialized\"] = \"ADAPTER_NOT_INITIALIZED\";\n  WalletErrorCode2[\"WalletNotConnected\"] = \"WALLET_NOT_CONNECTED\";\n  WalletErrorCode2[\"ProviderNotFound\"] = \"PROVIDER_NOT_FOUND\";\n  WalletErrorCode2[\"NetworkError\"] = \"NETWORK_ERROR\";\n  WalletErrorCode2[\"UserRejected\"] = \"USER_REJECTED\";\n  WalletErrorCode2[\"InvalidInput\"] = \"INVALID_INPUT\";\n  WalletErrorCode2[\"TransactionFailed\"] = \"TRANSACTION_FAILED\";\n  WalletErrorCode2[\"SignatureFailed\"] = \"SIGNATURE_FAILED\";\n  WalletErrorCode2[\"MethodNotSupported\"] = \"METHOD_NOT_SUPPORTED\";\n  WalletErrorCode2[\"FeatureNotSupported\"] = \"FEATURE_NOT_SUPPORTED\";\n  WalletErrorCode2[\"AdapterNotFound\"] = \"ADAPTER_NOT_FOUND\";\n  WalletErrorCode2[\"MissingConfig\"] = \"MISSING_CONFIG\";\n  WalletErrorCode2[\"InitializationFailed\"] = \"INITIALIZATION_FAILED\";\n  WalletErrorCode2[\"ConnectionFailed\"] = \"CONNECTION_FAILED\";\n  WalletErrorCode2[\"AccountUnavailable\"] = \"ACCOUNT_UNAVAILABLE\";\n  WalletErrorCode2[\"GasEstimationFailed\"] = \"GAS_ESTIMATION_FAILED\";\n  WalletErrorCode2[\"InsufficientFunds\"] = \"INSUFFICIENT_FUNDS\";\n  WalletErrorCode2[\"TransactionReceiptFailed\"] = \"TRANSACTION_RECEIPT_FAILED\";\n  WalletErrorCode2[\"TokenBalanceFailed\"] = \"TOKEN_BALANCE_FAILED\";\n  WalletErrorCode2[\"SigningFailed\"] = \"INVALID_SIGNATURE\";\n  WalletErrorCode2[\"ContractCallFailed\"] = \"CONTRACT CALL FAILED\";\n})(WalletErrorCode || (WalletErrorCode = {}));\nvar CrossChainErrorCode;\n(function(CrossChainErrorCode2) {\n  CrossChainErrorCode2[\"RpcValidationFailed\"] = \"RPC_VALIDATION_FAILED\";\n  CrossChainErrorCode2[\"RpcReliabilityWarning\"] = \"RPC_RELIABILITY_WARNING\";\n  CrossChainErrorCode2[\"Unknown\"] = \"CC_UNKNOWN\";\n  CrossChainErrorCode2[\"AdapterNotInitialized\"] = \"CC_ADAPTER_NOT_INITIALIZED\";\n  CrossChainErrorCode2[\"NetworkError\"] = \"CC_NETWORK_ERROR\";\n  CrossChainErrorCode2[\"InvalidInput\"] = \"CC_INVALID_INPUT\";\n  CrossChainErrorCode2[\"QuoteFailed\"] = \"CC_QUOTE_FAILED\";\n  CrossChainErrorCode2[\"ExecutionFailed\"] = \"CC_EXECUTION_FAILED\";\n  CrossChainErrorCode2[\"ProviderSetFailed\"] = \"CC_PROVIDER_SETUP_FAILED\";\n  CrossChainErrorCode2[\"StatusCheckFailed\"] = \"CC_STATUS_CHECK_FAILED\";\n  CrossChainErrorCode2[\"UnsupportedChain\"] = \"CC_UNSUPPORTED_CHAIN\";\n  CrossChainErrorCode2[\"UnsupportedToken\"] = \"CC_UNSUPPORTED_TOKEN\";\n  CrossChainErrorCode2[\"OperationNotFound\"] = \"CC_OPERATION_NOT_FOUND\";\n})(CrossChainErrorCode || (CrossChainErrorCode = {}));\nvar SmartContractErrorCode;\n(function(SmartContractErrorCode2) {\n  SmartContractErrorCode2[\"Unknown\"] = \"SC_UNKNOWN\";\n  SmartContractErrorCode2[\"AdapterNotInitialized\"] = \"SC_ADAPTER_NOT_INITIALIZED\";\n  SmartContractErrorCode2[\"NetworkError\"] = \"SC_NETWORK_ERROR\";\n  SmartContractErrorCode2[\"InvalidInput\"] = \"SC_INVALID_INPUT\";\n  SmartContractErrorCode2[\"CompilationFailed\"] = \"SC_COMPILATION_FAILED\";\n  SmartContractErrorCode2[\"DeploymentFailed\"] = \"SC_DEPLOYMENT_FAILED\";\n  SmartContractErrorCode2[\"MethodCallFailed\"] = \"SC_METHOD_CALL_FAILED\";\n  SmartContractErrorCode2[\"ReadCallFailed\"] = \"SC_READ_CALL_FAILED\";\n  SmartContractErrorCode2[\"WriteCallFailed\"] = \"SC_WRITE_CALL_FAILED\";\n  SmartContractErrorCode2[\"InvalidAbi\"] = \"SC_INVALID_ABI\";\n  SmartContractErrorCode2[\"ContractNotFound\"] = \"SC_CONTRACT_NOT_FOUND\";\n  SmartContractErrorCode2[\"WalletRequired\"] = \"SC_WALLET_REQUIRED\";\n})(SmartContractErrorCode || (SmartContractErrorCode = {}));\n\n// packages/shared/dist/types/registry.js\nvar Ms3Modules;\n(function(Ms3Modules2) {\n  Ms3Modules2[\"wallet\"] = \"wallet\";\n  Ms3Modules2[\"smartcontract\"] = \"smart-contract\";\n  Ms3Modules2[\"crosschain\"] = \"crosschain\";\n})(Ms3Modules || (Ms3Modules = {}));\nvar RuntimeEnvironment;\n(function(RuntimeEnvironment2) {\n  RuntimeEnvironment2[\"BROWSER\"] = \"browser\";\n  RuntimeEnvironment2[\"SERVER\"] = \"server\";\n})(RuntimeEnvironment || (RuntimeEnvironment = {}));\n\n// packages/shared/dist/helpers/environment.js\nfunction detectRuntimeEnvironment() {\n  const result = [];\n  if (typeof process !== \"undefined\" && process.versions && process.versions.node) {\n    result.push(RuntimeEnvironment.SERVER);\n  }\n  if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n    result.push(RuntimeEnvironment.BROWSER);\n  }\n  return result;\n}\nfunction validateEnvironment(adapterName, requirements) {\n  const currentEnvs = detectRuntimeEnvironment();\n  const isSupported = currentEnvs.some((env) => requirements.supportedEnvironments.includes(env));\n  if (!isSupported) {\n    const supportedList = requirements.supportedEnvironments.join(\", \");\n    const detectedList = currentEnvs.join(\", \");\n    let errorMessage = `Adapter '${adapterName}' requires ${supportedList} environment but detected ${detectedList}.`;\n    if (requirements.limitations) {\n      errorMessage += \"\\n\" + requirements.limitations.join(\"\\n\");\n    }\n    throw new AdapterError(errorMessage, {\n      code: WalletErrorCode.environment,\n      methodName: \"validateEnvironment\",\n      details: {\n        adapterName,\n        currentEnvironment: currentEnvs,\n        // ✅ Now array\n        supportedEnvironments: requirements.supportedEnvironments,\n        limitations: requirements.limitations\n      }\n    });\n  }\n  if (requirements.securityNotes && requirements.securityNotes.length > 0) {\n    requirements.securityNotes.forEach((note) => {\n      console.warn(`[${adapterName}] Security Note: ${note}`);\n    });\n  }\n}\n\n// packages/shared/dist/registry/compatibility.js\nvar WALLET_COMPATIBILITY = {\n  \"ethers@1.0.0\": {\n    adapterName: \"ethers\",\n    version: \"1.0.0\",\n    compatibleVersions: [\"1.0.0\"],\n    breakingChanges: [],\n    crossModuleCompatibility: [\n      {\n        moduleName: \"smart-contract\",\n        // ✅ This wallet can work with any smart-contract adapter that can generate contracts.\n        requiresCapabilities: [Capability.ContractGenerator]\n      },\n      {\n        moduleName: \"crosschain\",\n        // ✅ This wallet can work with any crosschain adapter that can execute operations.\n        requiresCapabilities: [Capability.OperationHandler]\n      }\n    ]\n  },\n  \"web3auth@1.0.0\": {\n    adapterName: \"web3auth\",\n    version: \"1.0.0\",\n    compatibleVersions: [\"1.0.0\"],\n    breakingChanges: [],\n    crossModuleCompatibility: [\n      {\n        moduleName: \"smart-contract\",\n        // ✅ This wallet can work with any smart-contract adapter that can generate contracts.\n        requiresCapabilities: [Capability.ContractGenerator]\n      },\n      {\n        moduleName: \"crosschain\",\n        // ✅ This wallet can work with any crosschain adapter that can execute operations.\n        requiresCapabilities: [Capability.OperationHandler]\n      }\n    ]\n  }\n};\nvar SMART_CONTRACT_COMPATIBILITY = {\n  \"openZeppelin@1.0.0\": {\n    adapterName: \"openZeppelin\",\n    version: \"1.0.0\",\n    compatibleVersions: [\"1.0.0\"],\n    breakingChanges: [],\n    crossModuleCompatibility: [\n      {\n        moduleName: \"wallet\",\n        // ✅ This smart-contract adapter needs a wallet that can handle transactions.\n        requiresCapabilities: [Capability.TransactionHandler, Capability.RPCHandler]\n      }\n    ]\n  }\n};\nvar CROSSCHAIN_COMPATIBILITY = {\n  \"lifi@1.0.0\": {\n    adapterName: \"lifi\",\n    version: \"1.0.0\",\n    compatibleVersions: [\"1.0.0\"],\n    breakingChanges: [],\n    crossModuleCompatibility: [\n      {\n        moduleName: \"wallet\",\n        // ✅ This crosschain adapter needs a wallet that can handle transactions and RPC calls.\n        requiresCapabilities: [Capability.TransactionHandler, Capability.RPCHandler]\n      }\n    ]\n  }\n};\nfunction getStaticCompatibilityMatrix(moduleName, adapterName, version) {\n  const key = `${adapterName}@${version}`;\n  switch (moduleName) {\n    case \"wallet\":\n      return WALLET_COMPATIBILITY[key];\n    case \"smart-contract\":\n      return SMART_CONTRACT_COMPATIBILITY[key];\n    case \"crosschain\":\n      return CROSSCHAIN_COMPATIBILITY[key];\n    default:\n      return void 0;\n  }\n}\nfunction checkCrossPackageCompatibility(sourceModule, sourceAdapter, sourceVersion, targetModule, targetAdapter, targetVersion) {\n  const sourceMatrix = getStaticCompatibilityMatrix(sourceModule, sourceAdapter, sourceVersion);\n  if (!sourceMatrix)\n    return false;\n  const targetModuleCompatRule = sourceMatrix.crossModuleCompatibility.find((cmc) => cmc.moduleName === targetModule);\n  if (!targetModuleCompatRule)\n    return false;\n  const targetAdapterInfo = registry.getAdapter(targetModule, targetAdapter, targetVersion);\n  if (!targetAdapterInfo?.capabilities)\n    return false;\n  const sourceAdapterInfo = registry.getAdapter(sourceModule, sourceAdapter, sourceVersion);\n  const currentEnvironments = detectRuntimeEnvironment();\n  if (sourceAdapterInfo?.environment && !sourceAdapterInfo.environment.supportedEnvironments.some((env) => currentEnvironments.includes(env))) {\n    return false;\n  }\n  if (targetAdapterInfo.environment && !targetAdapterInfo.environment.supportedEnvironments.some((env) => currentEnvironments.includes(env))) {\n    return false;\n  }\n  return targetModuleCompatRule.requiresCapabilities.every((requiredCap) => targetAdapterInfo.capabilities.includes(requiredCap));\n}\n\n// packages/shared/dist/registry/registry.js\nfunction getPropertyByPath(obj, path) {\n  return path.split(\".\").reduce((currentObject, key) => {\n    return currentObject && typeof currentObject === \"object\" && Object.prototype.hasOwnProperty.call(currentObject, key) ? currentObject[key] : void 0;\n  }, obj);\n}\nvar UniversalRegistry = class {\n  constructor() {\n    __publicField(this, \"modules\", /* @__PURE__ */ new Map());\n    __publicField(this, \"adapters\", /* @__PURE__ */ new Map());\n    __publicField(this, \"compatibilityMatrices\", /* @__PURE__ */ new Map());\n    __publicField(this, \"interfaceShapes\", /* @__PURE__ */ new Map());\n  }\n  // ✅ ADD: The missing map\n  /**\n  * ✅ NEW: Register the shape of a convenience alias.\n  * This is called by modules (e.g., wallet/index.ts) to define their aliases.\n  * @param interfaceName The name of the alias (e.g., 'IEVMWallet').\n  * @param requiredCapabilities An array of base capability names it requires.\n  */\n  registerInterfaceShape(interfaceName, requiredCapabilities) {\n    this.interfaceShapes.set(interfaceName, requiredCapabilities);\n  }\n  /**\n   * ✅ NEW: Get the shape of a convenience alias.\n   * This is called by the validator to verify an adapter meets an interface's requirements.\n   */\n  getInterfaceShape(interfaceName) {\n    return this.interfaceShapes.get(interfaceName);\n  }\n  /**\n  * ✅ NEW: A modern replacement for findAdaptersWithFeature that uses our new architecture.\n  * Finds all adapters that have a specific capability.\n  */\n  findAdaptersWithCapability(capability) {\n    const result = [];\n    for (const moduleAdapters of this.adapters.values()) {\n      for (const metadata of moduleAdapters.values()) {\n        if (metadata.capabilities?.includes(capability)) {\n          result.push(metadata);\n        }\n      }\n    }\n    return result;\n  }\n  /**\n  * Get compatibility matrix for an adapter\n  */\n  getCompatibilityMatrix(moduleName, name, version) {\n    const moduleMatrices = this.compatibilityMatrices.get(moduleName);\n    if (!moduleMatrices)\n      return void 0;\n    const key = `${name}@${version}`;\n    return moduleMatrices.get(key);\n  }\n  /**\n  * Get latest version of an adapter\n  */\n  getLatestVersion(moduleName, name) {\n    const latest = this.getLatestAdapter(moduleName, name);\n    return latest?.version;\n  }\n  /**\n     * Register a compatibility matrix for an adapter\n     */\n  registerCompatibilityMatrix(moduleName, matrix) {\n    if (!this.compatibilityMatrices.has(moduleName)) {\n      this.compatibilityMatrices.set(moduleName, /* @__PURE__ */ new Map());\n    }\n    const moduleMatrices = this.compatibilityMatrices.get(moduleName);\n    const key = `${matrix.adapterName}@${matrix.version}`;\n    moduleMatrices.set(key, matrix);\n  }\n  /**\n   * Check compatibility between adapter versions\n   */\n  checkAdapterCompatibility(moduleName, name, versions) {\n    const report = {\n      compatible: true,\n      conflicts: [],\n      recommendations: [],\n      supportedVersions: []\n    };\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters) {\n      report.compatible = false;\n      report.conflicts.push({\n        type: \"version\",\n        severity: \"error\",\n        description: `Module '${moduleName}' not found`,\n        affectedVersions: versions\n      });\n      return report;\n    }\n    for (const version of versions) {\n      const adapter = this.getAdapter(moduleName, name, version);\n      if (!adapter) {\n        report.compatible = false;\n        report.conflicts.push({\n          type: \"version\",\n          severity: \"error\",\n          description: `Adapter '${name}' version '${version}' not found`,\n          affectedVersions: [version]\n        });\n        continue;\n      }\n      report.supportedVersions.push(version);\n      const matrix = this.getCompatibilityMatrix(moduleName, name, version);\n      if (matrix) {\n        for (const otherVersion of versions) {\n          if (version !== otherVersion) {\n            const breakingChange = matrix.breakingChanges.find((bc) => bc.fromVersion === otherVersion || bc.toVersion === otherVersion);\n            if (breakingChange) {\n              report.conflicts.push({\n                type: \"breaking-change\",\n                severity: \"warning\",\n                description: `Breaking changes between ${breakingChange.fromVersion} and ${breakingChange.toVersion}: ${breakingChange.changes.join(\", \")}`,\n                affectedVersions: [breakingChange.fromVersion, breakingChange.toVersion],\n                suggestedAction: breakingChange.migrationPath\n              });\n            }\n          }\n        }\n      }\n    }\n    if (report.conflicts.length === 0) {\n      report.recommendations.push(\"All specified versions are compatible\");\n    } else {\n      const latestVersion = this.getLatestVersion(moduleName, name);\n      if (latestVersion) {\n        report.recommendations.push(`Consider using latest version: ${latestVersion}`);\n      }\n    }\n    return report;\n  }\n  /**\n  * Get adapters compatible with a specific adapter instance\n  */\n  getCompatibleAdapters(currentAdapter, targetModuleName) {\n    const compatibleAdapters = [];\n    const modulesToCheck = targetModuleName ? [targetModuleName] : Array.from(this.adapters.keys());\n    for (const moduleName of modulesToCheck) {\n      if (moduleName === currentAdapter.moduleName)\n        continue;\n      const moduleAdapters = this.adapters.get(moduleName);\n      if (!moduleAdapters)\n        continue;\n      for (const [, targetAdapterMetadata] of moduleAdapters) {\n        const isCompatible = checkCrossPackageCompatibility(currentAdapter.moduleName, currentAdapter.name, currentAdapter.version, targetAdapterMetadata.module, targetAdapterMetadata.name, targetAdapterMetadata.version);\n        if (isCompatible) {\n          compatibleAdapters.push(targetAdapterMetadata);\n        }\n      }\n    }\n    return compatibleAdapters;\n  }\n  /**\n   * Batch register adapters with atomic rollback\n   */\n  registerAdapters(adapters) {\n    const originalState = new Map(this.adapters);\n    try {\n      for (const adapter of adapters) {\n        this.registerAdapter(adapter.module, adapter);\n      }\n    } catch (error) {\n      this.adapters = originalState;\n      throw new Error(`Batch registration failed: ${error}. State rolled back.`);\n    }\n  }\n  /**\n   * Register a module in the registry\n   */\n  registerModule(metadata) {\n    this.modules.set(metadata.name, metadata);\n    if (!this.adapters.has(metadata.name)) {\n      this.adapters.set(metadata.name, /* @__PURE__ */ new Map());\n    }\n  }\n  /**\n   * Register an adapter for a specific module\n   */\n  registerAdapter(moduleName, metadata) {\n    if (!this.modules.has(moduleName)) {\n      const moduleMetadata = {\n        name: moduleName,\n        version: metadata.version\n        // Use adapter's version as default module version\n      };\n      this.registerModule(moduleMetadata);\n    }\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters) {\n      throw new Error(`Module ${moduleName} not properly initialized in registry`);\n    }\n    const adapterKey = `${metadata.name}@${metadata.version}`;\n    moduleAdapters.set(adapterKey, metadata);\n  }\n  /**\n   * Get an adapter by module and adapter name\n   */\n  getAdapter(moduleName, name, version) {\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters)\n      return void 0;\n    const adapterKey = `${name}@${version}`;\n    return moduleAdapters.get(adapterKey);\n  }\n  /**\n   * Get the latest version of an adapter by name\n   */\n  getLatestAdapter(moduleName, name) {\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters)\n      return void 0;\n    const matchingAdapters = [];\n    for (const [, metadata] of moduleAdapters.entries()) {\n      if (metadata.name === name) {\n        matchingAdapters.push(metadata);\n      }\n    }\n    if (matchingAdapters.length === 0)\n      return void 0;\n    matchingAdapters.sort((a, b) => b.version.localeCompare(a.version));\n    return matchingAdapters[0];\n  }\n  /**\n   * Get all adapters for a module\n   */\n  getModuleAdapters(moduleName) {\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters)\n      return [];\n    return Array.from(moduleAdapters.values());\n  }\n  /**\n   * Get all available versions of a specific adapter\n   */\n  getAdapterVersions(moduleName, name) {\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters)\n      return [];\n    const versions = [];\n    for (const [, metadata] of moduleAdapters.entries()) {\n      if (metadata.name === name) {\n        versions.push(metadata.version);\n      }\n    }\n    return versions.sort((a, b) => b.localeCompare(a));\n  }\n  /**\n   * Get all modules\n   */\n  getAllModules() {\n    return Array.from(this.modules.values());\n  }\n  /**\n     * Get environment requirements for an adapter\n     */\n  getEnvironmentRequirements(moduleName, name, version) {\n    const adapter = this.getAdapter(moduleName, name, version);\n    return adapter?.environment;\n  }\n  /**\n  * Check if an adapter supports a specific environment\n  */\n  supportsEnvironment(moduleName, name, version, environment) {\n    const adapter = this.getAdapter(moduleName, name, version);\n    if (!adapter || !adapter.environment)\n      return true;\n    return adapter.environment.supportedEnvironments.includes(environment);\n  }\n  /**\n   * Get adapters that support a specific environment\n   */\n  getAdaptersByEnvironment(moduleName, environment) {\n    const moduleAdapters = this.adapters.get(moduleName);\n    if (!moduleAdapters)\n      return [];\n    const result = [];\n    for (const [, metadata] of moduleAdapters.entries()) {\n      if (!metadata.environment || metadata.environment.supportedEnvironments.includes(environment)) {\n        result.push(metadata);\n      }\n    }\n    return result;\n  }\n};\nvar registry = new UniversalRegistry();\n\n// packages/shared/dist/helpers/network.js\n\nvar staticChainList = [\n  {\n    name: \"Ethereum Mainnet\",\n    chainId: 1,\n    shortName: \"eth\",\n    nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n    rpc: [\n      \"https://eth.llamarpc.com\",\n      \"https://ethereum-rpc.publicnode.com\",\n      \"https://1rpc.io/eth\",\n      \"https://cloudflare-eth.com\"\n    ],\n    blockExplorerUrl: \"https://etherscan.io\",\n    isTestnet: false,\n    isStatic: true\n  },\n  {\n    name: \"Polygon Mainnet\",\n    chainId: 137,\n    shortName: \"matic\",\n    nativeCurrency: { name: \"MATIC\", symbol: \"MATIC\", decimals: 18 },\n    rpc: [\n      \"https://polygon-rpc.com\",\n      \"https://polygon.llamarpc.com\",\n      \"https://polygon.drpc.org\"\n    ],\n    blockExplorerUrl: \"https://polygonscan.com\",\n    isTestnet: false,\n    isStatic: true\n  },\n  {\n    name: \"Optimism\",\n    chainId: 10,\n    shortName: \"oeth\",\n    nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n    rpc: [\n      \"https://mainnet.optimism.io\",\n      \"https://optimism.llamarpc.com\",\n      \"https://optimism.publicnode.com\"\n    ],\n    blockExplorerUrl: \"https://optimistic.etherscan.io\",\n    isTestnet: false,\n    isStatic: true\n  },\n  {\n    name: \"Arbitrum One\",\n    chainId: 42161,\n    shortName: \"arb1\",\n    nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n    rpc: [\n      \"https://arb1.arbitrum.io/rpc\",\n      \"https://arbitrum.llamarpc.com\",\n      \"https://arbitrum-one.public.blastapi.io\"\n    ],\n    blockExplorerUrl: \"https://arbiscan.io\",\n    isTestnet: false,\n    isStatic: true\n  },\n  {\n    name: \"Holesky\",\n    chainId: 17e3,\n    shortName: \"holesky\",\n    nativeCurrency: { name: \"Holesky Ether\", symbol: \"ETH\", decimals: 18 },\n    rpc: [\"https://ethereum-holesky.publicnode.com\"],\n    blockExplorerUrl: \"https://holesky.etherscan.io\",\n    isTestnet: true,\n    isStatic: true\n  },\n  {\n    name: \"Sepolia\",\n    chainId: 11155111,\n    shortName: \"sep\",\n    nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n    rpc: [\n      \"https://rpc.sepolia.org\",\n      \"https://ethereum-sepolia-rpc.publicnode.com\",\n      \"https://endpoints.omniatech.io/v1/eth/sepolia/public\",\n      \"https://eth-sepolia.public.blastapi.io\"\n    ],\n    blockExplorerUrl: \"https://sepolia.etherscan.io\",\n    isTestnet: true,\n    isStatic: true\n  }\n];\nvar _NetworkHelper = class _NetworkHelper {\n  constructor() {\n    __publicField(this, \"networkCache\", {});\n    __publicField(this, \"initializationPromise\", null);\n    for (const chain of staticChainList) {\n      this.addChainToCache(chain);\n    }\n  }\n  static getInstance() {\n    if (!_NetworkHelper.instance) {\n      _NetworkHelper.instance = new _NetworkHelper();\n    }\n    return _NetworkHelper.instance;\n  }\n  /**\n   * Ensures that the initial loading of networks has attempted to complete.\n   */\n  async ensureInitialized() {\n    if (!this.initializationPromise) {\n      this.initializationPromise = this.fetchAndMergeExternalChainList();\n    }\n    await this.initializationPromise;\n  }\n  async fetchAndMergeExternalChainList() {\n    try {\n      const response = await fetch(\"https://chainid.network/chains.json\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch chain list: ${response.statusText}`);\n      }\n      const externalChains = await response.json();\n      for (const chain of externalChains) {\n        const normalizedId = _NetworkHelper.normalizeChainId(chain.chainId);\n        if (!this.networkCache[normalizedId] || !this.networkCache[normalizedId].isStatic) {\n          this.addChainToCache(chain, false);\n        }\n      }\n    } catch (error) {\n      console.warn(\"[NetworkHelper] Could not fetch external chain list. Using embedded static list only.\", error);\n    }\n  }\n  addChainToCache(chain, isStatic = true) {\n    if (!chain || !chain.chainId)\n      return;\n    const normalizedId = _NetworkHelper.normalizeChainId(chain.chainId);\n    const rpcUrls = (chain.rpc || []).filter((url) => url && url.startsWith(\"http\") && !url.includes(\"${\"));\n    if (rpcUrls.length === 0 && !isStatic)\n      return;\n    const config = {\n      name: chain.name,\n      chainId: normalizedId,\n      shortName: chain.shortName,\n      nativeCurrency: chain.nativeCurrency,\n      rpcUrls,\n      blockExplorerUrl: chain.explorers?.[0]?.url || chain.blockExplorerUrl,\n      // isTestnet: chain.isTestnet ?? (chain.networkId !== 1), // Simple heuristic\n      isStatic,\n      displayName: chain.name,\n      decimals: chain.nativeCurrency?.decimals || 18,\n      ticker: chain.nativeCurrency?.symbol,\n      tickerName: chain.nativeCurrency?.name\n    };\n    this.networkCache[normalizedId] = config;\n    this.networkCache[chain.chainId.toString()] = config;\n    if (chain.shortName) {\n      this.networkCache[chain.shortName.toLowerCase()] = config;\n    }\n    if (chain.name) {\n      this.networkCache[chain.name.toLowerCase().replace(/\\s+/g, \"\")] = config;\n    }\n  }\n  async getNetworkConfig(networkIdentifier, preferredRpcUrls = [], useOnlyPreferredRpc = false) {\n    await this.ensureInitialized();\n    const identifierStr = String(networkIdentifier).toLowerCase().replace(/\\s+/g, \"\");\n    const baseConfig = this.networkCache[identifierStr];\n    if (!baseConfig || !baseConfig.chainId) {\n      return null;\n    }\n    const uniquePreferred = [...new Set(preferredRpcUrls.filter((url) => url))];\n    const baseRpcUrls = Array.isArray(baseConfig.rpcUrls) ? baseConfig.rpcUrls : [];\n    let urlsToTest = [];\n    if (useOnlyPreferredRpc) {\n      if (uniquePreferred.length === 0) {\n        console.warn(`[NetworkHelper] getNetworkConfig called with useOnlyPreferredRpc=true but no preferredRpcUrls were provided for ${networkIdentifier}.`);\n        return null;\n      }\n      urlsToTest = uniquePreferred;\n    } else {\n      urlsToTest = [...uniquePreferred, ...baseRpcUrls.filter((url) => !uniquePreferred.includes(url))];\n    }\n    if (urlsToTest.length === 0) {\n      return null;\n    }\n    const workingUrl = await this.findFirstWorkingRpc(urlsToTest, baseConfig.chainId);\n    if (!workingUrl) {\n      return null;\n    }\n    if (!useOnlyPreferredRpc && uniquePreferred.length > 0 && !uniquePreferred.includes(workingUrl)) {\n      console.warn(`[NetworkHelper] None of the preferred RPCs worked for ${baseConfig.name}. Using a public RPC: ${workingUrl}. For critical operations, ensure your preferred RPCs are operational.`);\n    }\n    const orderedRpcUrls = [workingUrl, ...urlsToTest.filter((url) => url !== workingUrl)];\n    return {\n      chainId: baseConfig.chainId,\n      name: baseConfig.name,\n      displayName: baseConfig.displayName || baseConfig.name,\n      rpcUrls: orderedRpcUrls,\n      decimals: baseConfig.decimals,\n      blockExplorerUrl: baseConfig.blockExplorerUrl,\n      ticker: baseConfig.ticker,\n      tickerName: baseConfig.tickerName,\n      shortName: baseConfig.shortName\n    };\n  }\n  async testRpcConnection(url, expectedChainId, timeoutMs = 5e3) {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), timeoutMs);\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ jsonrpc: \"2.0\", method: \"eth_chainId\", params: [], id: 1 }),\n        signal: controller.signal\n      });\n      if (!response.ok) {\n        return false;\n      }\n      const data = await response.json();\n      if (data.error) {\n        return false;\n      }\n      const receivedChainId = _NetworkHelper.normalizeChainId(data.result);\n      const expectedNormalized = _NetworkHelper.normalizeChainId(expectedChainId);\n      if (receivedChainId !== expectedNormalized) {\n        console.warn(`[testRpcConnection] Chain ID mismatch for ${url}: Got ${receivedChainId}, Expected ${expectedNormalized}`);\n        return false;\n      }\n      return true;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n      } else {\n      }\n      return false;\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n  async findFirstWorkingRpc(urls, expectedChainId, timeoutMs = 3e3) {\n    for (const url of urls) {\n      if (await this.testRpcConnection(url, expectedChainId, timeoutMs)) {\n        return url;\n      }\n    }\n    return null;\n  }\n  async getProvider(input, preferredRpcUrls = [], chainId) {\n    if (input instanceof ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider || input instanceof ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider) {\n      return input;\n    }\n    if (input && typeof input.request === \"function\") {\n      return new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(input, \"any\");\n    }\n    if (typeof input === \"string\") {\n      return new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(input);\n    }\n    if (input && typeof input === \"object\" && Array.isArray(input.rpcUrls) && input.rpcUrls.length > 0) {\n      return new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(input.rpcUrls[0]);\n    }\n    if (!chainId) {\n      throw new AdapterError(\"No chainId available to pick a public RPC. Supply your own in options.provider.\", { code: WalletErrorCode.InvalidInput, methodName: \"getProvider\" });\n    }\n    const net = await this.getNetworkConfig(chainId, preferredRpcUrls);\n    if (!net || !net.rpcUrls || net.rpcUrls.length === 0) {\n      throw new AdapterError(`No RPC could be reached for chainId=${chainId}. Please supply at least one working URL in options.provider.rpcUrls.`, { code: WalletErrorCode.ConnectionFailed, methodName: \"getProvider\" });\n    }\n    return new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(net.rpcUrls[0]);\n  }\n  static normalizeChainId(chainId) {\n    if (typeof chainId === \"number\") {\n      return `0x${chainId.toString(16).toLowerCase()}`;\n    }\n    if (typeof chainId === \"string\") {\n      if (chainId.toLowerCase().startsWith(\"0x\")) {\n        return chainId.toLowerCase();\n      }\n      const num = parseInt(chainId, 10);\n      if (!isNaN(num)) {\n        return `0x${num.toString(16).toLowerCase()}`;\n      }\n    }\n    throw new AdapterError(`Invalid chainId format: ${chainId}`, { code: WalletErrorCode.InvalidInput });\n  }\n  static assertConfigIsValid(config, context = \"NetworkConfiguration\") {\n    if (!config) {\n      throw new Error(`[NetworkHelper] ${context}: Configuration is null or undefined.`);\n    }\n    if (!config.chainId) {\n      throw new Error(`[NetworkHelper] ${context} (Name: ${config.name || \"N/A\"}): Missing chainId.`);\n    }\n    if (!config.rpcUrls || config.rpcUrls.length === 0) {\n      throw new Error(`[NetworkHelper] ${context} (Name: ${config.name || \"N/A\"}, ChainID: ${config.chainId}): Missing or empty rpcUrls.`);\n    }\n    return config;\n  }\n  static filterValidConfigs(configs) {\n    const isValid = (config) => !!config && !!config.chainId && Array.isArray(config.rpcUrls) && config.rpcUrls.length > 0;\n    if (Array.isArray(configs)) {\n      return configs.filter(isValid);\n    } else {\n      const result = {};\n      for (const key in configs) {\n        if (Object.prototype.hasOwnProperty.call(configs, key)) {\n          const config = configs[key];\n          if (isValid(config)) {\n            result[key] = config;\n          }\n        }\n      }\n      return result;\n    }\n  }\n  validatePrivateRpcsForChains(chainIds, walletRpcs) {\n    const missingChains = [];\n    for (const chainId of chainIds) {\n      const normalizedId = _NetworkHelper.normalizeChainId(chainId);\n      const decimalId = parseInt(normalizedId, 16).toString();\n      const hasRpcs = walletRpcs[normalizedId]?.length > 0 || walletRpcs[decimalId]?.length > 0;\n      if (!hasRpcs) {\n        missingChains.push(decimalId);\n      }\n    }\n    return {\n      hasAllPrivateRpcs: missingChains.length === 0,\n      missingChains\n    };\n  }\n};\n__publicField(_NetworkHelper, \"instance\");\nvar NetworkHelper = _NetworkHelper;\n\n// packages/shared/dist/helpers/keys.js\n\nvar PrivateKeyHelper = class {\n  /**\n   * Generates a new random EVM-compatible private key.\n   * @returns A string representing the private key (hexadecimal, 0x-prefixed).\n   */\n  generatePrivateKey() {\n    try {\n      const wallet = ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet.createRandom();\n      return wallet.privateKey;\n    } catch (error) {\n      throw new Error(`[PrivateKeyHelper.generatePrivateKey] Failed: ${error.message}`);\n    }\n  }\n  /**\n   * Encrypts an EVM private key into a JSON keystore (EIP-2335 format) using a password.\n   * @param privateKey The EVM private key string (hexadecimal, 0x-prefixed).\n   * @param password The password for encryption.\n   * @returns A promise resolving to the JSON keystore string.\n   * @throws Error if the private key is invalid or encryption fails.\n   */\n  async encryptPrivateKey(privateKey, password) {\n    if (!this.isValidEvmPrivateKey(privateKey)) {\n      throw new Error(\"[PrivateKeyHelper.encryptPrivateKey] Invalid private key format.\");\n    }\n    try {\n      const wallet = new ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet(privateKey);\n      const jsonKeystore = await wallet.encrypt(password);\n      return jsonKeystore;\n    } catch (error) {\n      throw new Error(`[PrivateKeyHelper.encryptPrivateKey] Encryption failed: ${error.message}`);\n    }\n  }\n  /**\n   * Decrypts an EVM JSON keystore using a password.\n   * @param encryptedJsonKeystore The JSON keystore string.\n   * @param password The password for decryption.\n   * @returns A promise resolving to the decrypted EVM private key string.\n   * @throws Error if decryption fails (e.g., invalid keystore, incorrect password).\n   */\n  async decryptPrivateKey(encryptedJsonKeystore, password) {\n    try {\n      const wallet = await ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet.fromEncryptedJson(encryptedJsonKeystore, password);\n      return wallet.privateKey;\n    } catch (error) {\n      throw new Error(`[PrivateKeyHelper.decryptPrivateKey] Decryption failed: ${error.message}`);\n    }\n  }\n  /**\n   * Derives the public Ethereum address from an EVM private key.\n   * @param privateKey The EVM private key string (hexadecimal, 0x-prefixed).\n   * @returns The corresponding public address string.\n   * @throws Error if the private key is invalid.\n   */\n  getAddressFromPrivateKey(privateKey) {\n    if (!this.isValidEvmPrivateKey(privateKey)) {\n      throw new Error(\"[PrivateKeyHelper.getAddressFromPrivateKey] Invalid private key format.\");\n    }\n    try {\n      const wallet = new ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet(privateKey);\n      return wallet.address;\n    } catch (error) {\n      throw new Error(`[PrivateKeyHelper.getAddressFromPrivateKey] Failed to derive address: ${error.message}`);\n    }\n  }\n  /**\n  * Generates a new random BIP39 mnemonic phrase.\n  * Uses ethers.Wallet.createRandom() for robust generation.\n  * @returns A randomly generated mnemonic phrase (typically 12 words).\n  * @throws Error if mnemonic generation fails.\n  */\n  generateMnemonic() {\n    try {\n      const randomWallet = ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet.createRandom();\n      if (!randomWallet.mnemonic || !randomWallet.mnemonic.phrase) {\n        throw new Error(\"Failed to generate mnemonic phrase from random wallet.\");\n      }\n      return randomWallet.mnemonic.phrase;\n    } catch (error) {\n      const wrappedError = new Error(`[PrivateKeyHelper.generateMnemonic] Failed during mnemonic generation: ${error.message}`);\n      if (error.stack) {\n        wrappedError.stack = error.stack;\n      }\n      wrappedError.cause = error;\n      throw wrappedError;\n    }\n  }\n  /**\n   * Derives an EVM private key from a mnemonic phrase and an optional HD path.\n   * @param mnemonic The BIP-39 mnemonic phrase.\n   * @param path The HD path (e.g., \"m/44'/60'/0'/0/0\"). Defaults to the standard Ethereum path.\n   * @returns The derived private key string.\n   * @throws Error if the mnemonic is invalid or derivation fails.\n   */\n  getPrivateKeyFromMnemonic(mnemonic, path) {\n    const hdPath = path || \"m/44'/60'/0'/0/0\";\n    try {\n      if (!ethers__WEBPACK_IMPORTED_MODULE_3__.Mnemonic.isValidMnemonic(mnemonic)) {\n        throw new Error(\"Invalid mnemonic phrase provided.\");\n      }\n      const mnemonicInstance = ethers__WEBPACK_IMPORTED_MODULE_3__.Mnemonic.fromPhrase(mnemonic);\n      const hdNode = ethers__WEBPACK_IMPORTED_MODULE_4__.HDNodeWallet.fromMnemonic(mnemonicInstance, hdPath);\n      return hdNode.privateKey;\n    } catch (error) {\n      throw new Error(`[PrivateKeyHelper.getPrivateKeyFromMnemonic] Failed: ${error.message}`);\n    }\n  }\n  /**\n   * Validates if the given string is a plausible EVM private key format.\n   * (Basic check for 0x prefix and 64 hex characters).\n   * @param privateKey The string to validate.\n   * @returns True if it matches the basic format, false otherwise.\n   */\n  isValidEvmPrivateKey(privateKey) {\n    return typeof privateKey === \"string\" && (0,ethers__WEBPACK_IMPORTED_MODULE_5__.isHexString)(privateKey, 32);\n  }\n};\n\n// packages/shared/dist/helpers/validator.js\nfunction validateAdapterParameters(args) {\n  const { name, version, params, adapterInfo, registry: registry2, factoryMethodName } = args;\n  const { expectedInterface } = params;\n  console.log(\"Validator - arguments, \", args);\n  if (expectedInterface) {\n    const requiredCapabilities = registry2.getInterfaceShape(expectedInterface);\n    if (!requiredCapabilities) {\n      throw new AdapterError(`Unknown interface shape requested: '${expectedInterface}'. Ensure it is registered in the registry.`, { code: \"INTERNAL_ERROR\" });\n    }\n    const adapterCapabilities = adapterInfo.capabilities || [];\n    for (const req of requiredCapabilities) {\n      if (!adapterCapabilities.includes(req)) {\n        throw new AdapterError(`Adapter '${name}@${version}' does not fully implement the '${expectedInterface}' interface. Missing capability: '${req}'.`, { code: \"INCOMPATIBLE_ADAPTER\", methodName: factoryMethodName });\n      }\n    }\n  }\n  if (adapterInfo.requirements && adapterInfo.requirements.length > 0) {\n    console.log(\"Validator - adapterInfo, \", adapterInfo);\n    for (const req of adapterInfo.requirements) {\n      const value = getPropertyByPath(params, req.path);\n      if (value === void 0 && !req.allowUndefined) {\n        const errorMessage = req.message || `Required option '${req.path}' is missing for adapter '${name}'.`;\n        throw new AdapterError(errorMessage, {\n          methodName: factoryMethodName,\n          code: \"MISSING_ADAPTER_REQUIREMENT\",\n          details: { path: req.path, message: req.message }\n        });\n      }\n      if (req.type && value !== void 0) {\n        const valueType = Array.isArray(value) ? \"array\" : typeof value;\n        if (valueType !== req.type) {\n          const errorMessage = req.message || `Required option '${req.path}' for adapter '${name}' must be of type '${req.type}', but received '${valueType}'.`;\n          throw new AdapterError(errorMessage, {\n            methodName: factoryMethodName,\n            code: \"INVALID_ADAPTER_REQUIREMENT_TYPE\",\n            details: { path: req.path, message: req.message, expectedType: req.type, actualType: valueType }\n          });\n        }\n      }\n    }\n  }\n}\n\n// packages/shared/dist/helpers/devtool.js\nfunction analyzeJoiSchema(schema, basePath) {\n  console.log(`\\u{1F52C} [analyzeJoiSchema] Analyzing schema at path: ${basePath}`);\n  const requirements = [];\n  try {\n    const description = schema.describe();\n    console.log(`\\u{1F4CB} [analyzeJoiSchema] Schema description type:`, description.type);\n    console.log(`\\u{1F4CB} [analyzeJoiSchema] Schema keys:`, description.keys ? Object.keys(description.keys) : \"NO KEYS\");\n    if (description.type === \"object\" && description.keys) {\n      console.log(`\\u2705 [analyzeJoiSchema] Processing object schema with ${Object.keys(description.keys).length} keys`);\n      for (const [key, fieldDesc] of Object.entries(description.keys)) {\n        console.log(`\\u{1F511} [analyzeJoiSchema] Processing field: ${key}`);\n        console.log(`\\u{1F4DD} [analyzeJoiSchema] Field description:`, fieldDesc);\n        const fieldSchema = fieldDesc;\n        const fieldPath = `${basePath}.${key}`;\n        const hasPresenceFlag = fieldSchema.flags?.presence;\n        const isRequired = hasPresenceFlag === \"required\" || !hasPresenceFlag && !fieldSchema.flags?.optional;\n        let fieldType = fieldSchema.type || \"any\";\n        if (fieldType === \"alternatives\" && fieldSchema.matches) {\n          fieldType = fieldSchema.matches[0]?.schema?.type || \"any\";\n        }\n        let message = fieldSchema.flags?.description || \"\";\n        if (!message) {\n          const mandatory = isRequired ? \"required\" : \"optional\";\n          message = `${key} is ${mandatory} and must be of type: ${fieldType}`;\n        }\n        console.log(`\\u{1F4CA} [analyzeJoiSchema] Field ${key}: type=${fieldType}, required=${isRequired}, message=\"${message}\"`);\n        requirements.push({\n          path: fieldPath,\n          type: fieldType,\n          allowUndefined: !isRequired,\n          message\n        });\n        if (fieldSchema.type === \"object\" && fieldSchema.keys) {\n          console.log(`\\u{1F504} [analyzeJoiSchema] Recursing into nested object: ${key}`);\n          const nestedRequirements = analyzeJoiSchemaFromDescription(fieldSchema, fieldPath);\n          requirements.push(...nestedRequirements);\n        }\n      }\n    } else {\n      console.warn(`\\u26A0\\uFE0F [analyzeJoiSchema] Expected object schema but got type: ${description.type}`);\n    }\n  } catch (error) {\n    console.error(`\\u274C [analyzeJoiSchema] Failed to analyze schema at ${basePath}:`, error);\n  }\n  console.log(`\\u{1F4CA} [analyzeJoiSchema] Generated ${requirements.length} requirements for ${basePath}`);\n  return requirements;\n}\nfunction analyzeJoiSchemaFromDescription(description, basePath) {\n  const requirements = [];\n  if (description.keys) {\n    for (const [key, fieldDesc] of Object.entries(description.keys)) {\n      const fieldSchema = fieldDesc;\n      const fieldPath = `${basePath}.${key}`;\n      const isRequired = fieldSchema.flags?.presence === \"required\" || !fieldSchema.flags?.presence && !fieldSchema.flags?.optional && !fieldSchema.flags?.default;\n      let fieldType = fieldSchema.type || \"any\";\n      if (fieldType === \"alternatives\" && fieldSchema.matches) {\n        fieldType = fieldSchema.matches[0]?.schema?.type || \"any\";\n      }\n      let message = fieldSchema.flags?.description || \"\";\n      if (!message) {\n        const mandatory = isRequired ? \"required\" : \"optional\";\n        message = `${key} is ${mandatory} and must be of type: ${fieldType}`;\n      }\n      requirements.push({\n        path: fieldPath,\n        type: fieldType,\n        allowUndefined: !isRequired,\n        message\n      });\n      if (fieldSchema.type === \"object\" && fieldSchema.keys) {\n        const nestedRequirements = analyzeJoiSchemaFromDescription(fieldSchema, fieldPath);\n        requirements.push(...nestedRequirements);\n      }\n    }\n  }\n  return requirements;\n}\nfunction generateFallbackRequirements(adapterName) {\n  console.log(`[getRequirements] No requirements found for ${adapterName} interface - using fallback.`);\n  console.warn(`[getRequirements] Using fallback requirements for ${adapterName}`);\n  if (adapterName === \"ethers\") {\n    return [\n      {\n        path: \"options.privateKey\",\n        type: \"string\",\n        allowUndefined: true,\n        message: \"Private key for wallet (generates random if not provided)\"\n      },\n      {\n        path: \"options.provider\",\n        type: \"object\",\n        allowUndefined: true,\n        message: \"Optional provider configuration\"\n      }\n    ];\n  }\n  if (adapterName === \"web3auth\") {\n    return [\n      {\n        path: \"options.web3authConfig\",\n        type: \"object\",\n        allowUndefined: false,\n        message: \"Web3Auth configuration object is required\"\n      },\n      {\n        path: \"options.web3authConfig.clientId\",\n        type: \"string\",\n        allowUndefined: false,\n        message: \"Your Web3Auth Client ID is required\"\n      }\n    ];\n  }\n  return [];\n}\nfunction analyzeMethodSignature(method, methodName) {\n  try {\n    const funcString = method.toString();\n    const paramMatch = funcString.match(/\\(([^)]*)\\)/);\n    const paramString = paramMatch ? paramMatch[1].trim() : \"\";\n    const parameters = paramString ? paramString.split(\",\").map((param) => {\n      const cleanParam = param.trim();\n      const name = cleanParam.split(/[=:]/)[0].trim().replace(/[{}[\\]]/g, \"\");\n      return {\n        name: name || \"param\",\n        type: \"any\",\n        // We can't reliably extract types from compiled JS\n        optional: cleanParam.includes(\"=\") || cleanParam.includes(\"?\")\n      };\n    }) : [];\n    const isAsync = funcString.includes(\"async \") || funcString.includes(\"Promise\") || funcString.includes(\"await \");\n    let returnType = \"any\";\n    if (methodName.startsWith(\"is\") || methodName.startsWith(\"has\")) {\n      returnType = \"boolean\";\n    } else if (methodName === \"initialize\" || methodName === \"disconnect\") {\n      returnType = \"void\";\n    }\n    if (isAsync && !returnType.includes(\"Promise\")) {\n      returnType = returnType === \"void\" ? \"Promise<void>\" : `Promise<${returnType}>`;\n    }\n    console.log(`\\u2705 [analyzeMethodSignature] ${methodName}(${parameters.length} params) -> ${returnType}, async: ${isAsync}`);\n    return {\n      name: methodName,\n      parameters,\n      returnType,\n      isAsync\n    };\n  } catch (error) {\n    console.warn(`\\u274C [analyzeMethodSignature] Failed to analyze ${methodName}:`, error);\n    return {\n      name: methodName,\n      parameters: [],\n      returnType: \"any\",\n      isAsync: false\n    };\n  }\n}\nfunction getEnvironments(adapterName, supportedEnvs, customLimitations, customSecurityNotes) {\n  const requirements = {\n    supportedEnvironments: [...supportedEnvs],\n    limitations: [...customLimitations || []],\n    securityNotes: [...customSecurityNotes || []]\n  };\n  for (const env of supportedEnvs) {\n    switch (env) {\n      case RuntimeEnvironment.BROWSER:\n        requirements.limitations.push(\"Requires browser environment with window and document objects\", \"Cannot be used in Node.js server environments\", \"May require user interaction for authentication flows\");\n        requirements.securityNotes.push(\"Ensure secure handling of private keys in browser environment\", \"Consider using hardware wallets for enhanced security\");\n        break;\n      case RuntimeEnvironment.SERVER:\n        requirements.limitations.push(\"Requires Node.js server environment\", \"Cannot be used in browser environments\");\n        requirements.securityNotes.push(\"Server environments provide better security for sensitive operations\", \"Ensure proper private key management and storage\");\n        break;\n    }\n  }\n  requirements.securityNotes.push(`${adapterName} adapter follows standard security practices`);\n  requirements.limitations = [...new Set(requirements.limitations)];\n  requirements.securityNotes = [...new Set(requirements.securityNotes)];\n  return requirements;\n}\nfunction getFeatures(adapterClass) {\n  if (!adapterClass || typeof adapterClass !== \"function\") {\n    console.warn(`[getFeatures] Invalid adapter class provided:`, typeof adapterClass);\n    return [];\n  }\n  console.log(`\\u{1F527} [getFeatures] Analyzing ${adapterClass.name} for method signatures by walking prototype chain.`);\n  const signatures = [];\n  const seenMethods = /* @__PURE__ */ new Set();\n  let currentProto = adapterClass.prototype;\n  while (currentProto && currentProto !== Object.prototype) {\n    const methodNames = Object.getOwnPropertyNames(currentProto).filter((name) => {\n      return name !== \"constructor\" && !name.startsWith(\"_\") && !seenMethods.has(name) && typeof currentProto[name] === \"function\";\n    });\n    console.log(`\\u{1F50D} [getFeatures] Found ${methodNames.length} methods on ${currentProto.constructor.name}:`, methodNames);\n    for (const methodName of methodNames) {\n      seenMethods.add(methodName);\n      const method = currentProto[methodName];\n      const signature = analyzeMethodSignature(method, methodName);\n      signatures.push(signature);\n    }\n    currentProto = Object.getPrototypeOf(currentProto);\n  }\n  console.log(`\\u2705 [getFeatures] Generated ${signatures.length} total method signatures for ${adapterClass.name}`);\n  return signatures;\n}\nfunction getRequirements(joiSchema, adapterName) {\n  console.log(`\\u{1F50D} [getRequirements] Starting analysis for ${adapterName}`);\n  if (adapterName.toLowerCase() === \"ethers\") {\n    console.log(`[getRequirements] Using fallback requirements for ${adapterName}`);\n    return generateFallbackRequirements(adapterName);\n  }\n  if (typeof window !== \"undefined\") {\n    console.log(`\\u{1F310} [getRequirements] Browser environment - using fallback for ${adapterName}`);\n    return generateFallbackRequirements(adapterName);\n  }\n  if (joiSchema && typeof joiSchema.describe === \"function\") {\n    try {\n      return analyzeJoiSchema(joiSchema, \"options\");\n    } catch (error) {\n      console.error(`\\u274C [getRequirements] JOI validation failed:`, error);\n    }\n  }\n  return generateFallbackRequirements(adapterName);\n}\n\n// packages/wallet/dist/adapters/ethers/ethersWallet.js\n\n\n// packages/wallet/dist/types/enums/index.js\nvar WalletEvent;\n(function(WalletEvent2) {\n  WalletEvent2[\"connect\"] = \"connect\";\n  WalletEvent2[\"disconnect\"] = \"disconnect\";\n  WalletEvent2[\"accountsChanged\"] = \"accountsChanged\";\n  WalletEvent2[\"chainChanged\"] = \"chainChanged\";\n  WalletEvent2[\"balanceChanged\"] = \"balanceChanged\";\n  WalletEvent2[\"message\"] = \"message\";\n  WalletEvent2[\"error\"] = \"error\";\n})(WalletEvent || (WalletEvent = {}));\nvar WalletType;\n(function(WalletType2) {\n  WalletType2[\"core\"] = \"core\";\n  WalletType2[\"evm\"] = \"evm\";\n  WalletType2[\"web3auth\"] = \"web3auth\";\n})(WalletType || (WalletType = {}));\nvar NonceType;\n(function(NonceType2) {\n  NonceType2[\"latest\"] = \"latest\";\n  NonceType2[\"pending\"] = \"pending\";\n})(NonceType || (NonceType = {}));\n\n// packages/wallet/dist/helpers/signatures.js\n\nvar EIP712Validator = class _EIP712Validator {\n  /**\n   * Validates the basic structure of EIP-712 typed data\n   * @param data The typed data to validate\n   * @throws AdapterError if structure is invalid\n   */\n  static validateStructure(data) {\n    if (!data || typeof data !== \"object\") {\n      throw new AdapterError(\"Invalid EIP-712 structure: data must be an object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (!data.domain) {\n      throw new AdapterError(\"Invalid EIP-712 structure: must have domain object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (typeof data.domain !== \"object\") {\n      throw new AdapterError(\"Invalid EIP-712 structure: domain must be an object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (!data.types) {\n      throw new AdapterError(\"Invalid EIP-712 structure: must have types object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (typeof data.types !== \"object\") {\n      throw new AdapterError(\"Invalid EIP-712 structure: types must be an object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (data.value === void 0 || data.value === null) {\n      throw new AdapterError(\"Invalid EIP-712 structure: must have value\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n  }\n  /**\n   * Validates the EIP-712 domain against the current network\n   * @param domain The domain object from typed data\n   * @param currentChainId The current network's chain ID\n   * @throws AdapterError if domain is invalid or doesn't match network\n   */\n  static validateDomain(domain, currentChainId) {\n    if (!domain.chainId && domain.chainId !== 0) {\n      throw new AdapterError(\"EIP-712 domain missing chainId\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    const domainChainId = domain.chainId.toString();\n    const networkChainId = currentChainId.toString();\n    const domainChainIdHex = domainChainId.startsWith(\"0x\") ? domainChainId : `0x${parseInt(domainChainId, 10).toString(16)}`;\n    const networkChainIdHex = networkChainId.startsWith(\"0x\") ? networkChainId : `0x${parseInt(networkChainId, 10).toString(16)}`;\n    if (domainChainIdHex.toLowerCase() !== networkChainIdHex.toLowerCase()) {\n      throw new AdapterError(`EIP-712 domain chainId (${domainChainId}) doesn't match current network (${currentChainId})`, {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n    if (domain.verifyingContract && !ethers__WEBPACK_IMPORTED_MODULE_6__.isAddress(domain.verifyingContract)) {\n      throw new AdapterError(\"EIP-712 domain verifyingContract must be a valid address\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"signTypedData\"\n      });\n    }\n  }\n  /**\n   * Validates the types structure of EIP-712 typed data\n   * @param types The types object from typed data\n   * @throws AdapterError if types structure is invalid\n   */\n  static validateTypes(types) {\n    for (const [typeName, fields] of Object.entries(types)) {\n      if (!Array.isArray(fields)) {\n        throw new AdapterError(`EIP-712 type '${typeName}' must be an array of field definitions`, {\n          code: WalletErrorCode.InvalidInput,\n          methodName: \"signTypedData\"\n        });\n      }\n      for (const field of fields) {\n        if (!field.name || !field.type) {\n          throw new AdapterError(`EIP-712 field in '${typeName}' missing name or type`, {\n            code: WalletErrorCode.InvalidInput,\n            methodName: \"signTypedData\"\n          });\n        }\n        if (!_EIP712Validator.isValidEIP712Type(field.type)) {\n          console.warn(`[EIP712Validator] Warning: EIP-712 field type '${field.type}' may not be standard`);\n        }\n      }\n    }\n  }\n  /**\n   * Validates if a type string conforms to EIP-712 standards\n   * @param type The type string to validate\n   * @returns true if the type is valid, false otherwise\n   */\n  static isValidEIP712Type(type) {\n    const basicTypes = [\"bool\", \"address\", \"string\", \"bytes\"];\n    const dynamicTypes = /^(bytes\\d+|uint\\d+|int\\d+)$/;\n    const arrayTypes = /^(.+)\\[\\d*\\]$/;\n    if (basicTypes.includes(type)) {\n      return true;\n    }\n    if (dynamicTypes.test(type)) {\n      return true;\n    }\n    if (arrayTypes.test(type)) {\n      const match = type.match(arrayTypes);\n      if (match && match[1]) {\n        const baseType = match[1];\n        if (!baseType.includes(\"[\")) {\n          return _EIP712Validator.isValidEIP712Type(baseType);\n        }\n      }\n    }\n    if (type === \"bytes\") {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Performs comprehensive EIP-712 validation\n   * @param data The typed data to validate\n   * @param currentChainId The current network's chain ID\n   * @throws AdapterError if any validation fails\n   */\n  static validateAll(data, currentChainId) {\n    _EIP712Validator.validateStructure(data);\n    _EIP712Validator.validateDomain(data.domain, currentChainId);\n    _EIP712Validator.validateTypes(data.types);\n  }\n  /**\n   * Verifies a signature immediately after signing for additional security\n   * @param data The typed data that was signed\n   * @param signature The signature to verify\n   * @param expectedAddress The expected signer address\n   * @returns true if signature is valid, false otherwise\n   */\n  static verifySignature(data, signature, expectedAddress) {\n    try {\n      const recoveredAddress = ethers__WEBPACK_IMPORTED_MODULE_7__.verifyTypedData(data.domain, data.types, data.value, signature);\n      return recoveredAddress.toLowerCase() === expectedAddress.toLowerCase();\n    } catch (error) {\n      console.error(\"[EIP712Validator] Signature verification failed:\", error);\n      return false;\n    }\n  }\n  /**\n   * Validates signature format for EIP-712\n   * @param signature The signature to validate\n   * @returns true if format is valid, false otherwise\n   */\n  static isValidSignatureFormat(signature) {\n    return signature.startsWith(\"0x\") && signature.length === 132;\n  }\n};\n\n// packages/wallet/dist/helpers/units.js\n\nfunction toWei(value, decimals) {\n  if (typeof value === \"bigint\") {\n    return value.toString();\n  }\n  const s = String(value).trim();\n  if (!s || s === \"0\") {\n    return \"0\";\n  }\n  try {\n    return ethers__WEBPACK_IMPORTED_MODULE_8__.parseUnits(s, decimals).toString();\n  } catch (err) {\n    throw new AdapterError(`Invalid value format: ${value}`, {\n      methodName: \"toWei\",\n      code: WalletErrorCode.InvalidInput,\n      cause: err\n    });\n  }\n}\nfunction toBigInt(value) {\n  try {\n    if (typeof value === \"bigint\")\n      return value;\n    if (typeof value === \"number\")\n      return BigInt(value);\n    return BigInt(value.trim());\n  } catch (err) {\n    throw new AdapterError(`Invalid BigInt value: ${value}`, {\n      methodName: \"toBigInt\",\n      code: WalletErrorCode.InvalidInput,\n      cause: err\n    });\n  }\n}\n\n// packages/wallet/dist/adapters/ethers/ethersWallet.js\nvar EvmWalletAdapter = class _EvmWalletAdapter {\n  // NEW: Add local network state\n  constructor(args) {\n    __publicField(this, \"name\");\n    __publicField(this, \"version\");\n    __publicField(this, \"wallet\");\n    __publicField(this, \"provider\");\n    __publicField(this, \"config\");\n    __publicField(this, \"_connected\", false);\n    __publicField(this, \"initialized\", false);\n    __publicField(this, \"decimals\", 18);\n    __publicField(this, \"eventListeners\", /* @__PURE__ */ new Map());\n    __publicField(this, \"multiChainRpcs\", {});\n    __publicField(this, \"network\", null);\n    this.name = args.name;\n    this.version = args.version;\n    this.config = args;\n    this.multiChainRpcs = args.options.multiChainRpcs || {};\n  }\n  /**\n   * Factory method to create and initialize an instance of EvmWalletAdapter.\n   */\n  static async create(args) {\n    const instance = new _EvmWalletAdapter(args);\n    await instance.initialize();\n    return instance;\n  }\n  // --- Core Lifecycle & Connection Methods ---\n  async initialize() {\n    if (this.initialized)\n      return;\n    const { privateKey, provider: providerConfig } = this.config.options;\n    if (!privateKey) {\n      throw new AdapterError(\"privateKey is required in options.\", {\n        code: WalletErrorCode.MissingConfig,\n        methodName: \"initialize\"\n      });\n    }\n    this.wallet = new ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet(privateKey);\n    if (providerConfig) {\n      await this.setProvider(providerConfig);\n    }\n    this.initialized = true;\n  }\n  async disconnect() {\n    this.provider = void 0;\n    this._connected = false;\n    this.initialized = false;\n    this.eventListeners.clear();\n    this.emitEvent(\"disconnect\", void 0);\n  }\n  isConnected() {\n    return this._connected && !!this.provider && !!this.wallet;\n  }\n  isInitialized() {\n    return this.initialized;\n  }\n  /**\n  * Get ALL configured RPC URLs for ALL chains\n  */\n  getAllChainRpcs() {\n    return { ...this.multiChainRpcs };\n  }\n  /**\n   * Update ALL RPC configurations at once\n   */\n  async updateAllChainRpcs(multiChainRpcs) {\n    if (!multiChainRpcs || typeof multiChainRpcs !== \"object\") {\n      throw new AdapterError(\"Invalid RPC configuration - must be an object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"updateAllChainRpcs\"\n      });\n    }\n    for (const [chainId, rpcUrls] of Object.entries(multiChainRpcs)) {\n      if (!Array.isArray(rpcUrls)) {\n        throw new AdapterError(`Invalid RPC URLs for chain ${chainId} - must be array`, {\n          code: WalletErrorCode.InvalidInput,\n          methodName: \"updateAllChainRpcs\"\n        });\n      }\n      if (rpcUrls.length === 0) {\n        throw new AdapterError(`Invalid RPC URLs for chain ${chainId} - array cannot be empty`, {\n          code: WalletErrorCode.InvalidInput,\n          methodName: \"updateAllChainRpcs\"\n        });\n      }\n      for (const url of rpcUrls) {\n        if (typeof url !== \"string\" || !url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n          throw new AdapterError(`Invalid RPC URL for chain ${chainId}: ${url} - must be HTTP/HTTPS URL`, {\n            code: WalletErrorCode.InvalidInput,\n            methodName: \"updateAllChainRpcs\"\n          });\n        }\n      }\n    }\n    this.multiChainRpcs = { ...multiChainRpcs };\n    console.log(`[EvmWalletAdapter] Updated all chain RPCs for ${Object.keys(multiChainRpcs).length} chains`);\n  }\n  async setProvider(config) {\n    if (!config.chainId) {\n      throw new AdapterError(\"chainId is required in NetworkConfig\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"setProvider\"\n      });\n    }\n    const cid = config.chainId;\n    const preferred = this.multiChainRpcs[cid] || this.multiChainRpcs[String(cid)] || [];\n    const networkHelper = NetworkHelper.getInstance();\n    await networkHelper.ensureInitialized();\n    const netConf = await networkHelper.getNetworkConfig(cid, preferred, false);\n    if (!netConf) {\n      throw new AdapterError(`Failed to connect to any provided RPC URL for chain ${cid}`, { code: WalletErrorCode.ConnectionFailed, methodName: \"setProvider\" });\n    }\n    this.network = null;\n    this.network = netConf;\n    this.provider = new ethers__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(netConf.rpcUrls[0]);\n    if (this.wallet) {\n      this.wallet = this.wallet.connect(this.provider);\n    }\n    this._connected = true;\n    this.emitEvent(WalletEvent.chainChanged, netConf.chainId);\n  }\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, /* @__PURE__ */ new Set());\n    }\n    this.eventListeners.get(event).add(callback);\n  }\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).delete(callback);\n    }\n  }\n  emitEvent(eventName, payload) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners && listeners.size > 0) {\n      listeners.forEach((callback) => {\n        try {\n          callback(payload);\n        } catch (error) {\n          console.error(`[${this.name}] Error in ${eventName} event handler:`, error);\n        }\n      });\n    }\n  }\n  // --- Wallet Information & State ---\n  async getAccounts() {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected });\n    }\n    const accounts = [this.wallet.address];\n    this.emitEvent(\"accountsChanged\", accounts);\n    return accounts;\n  }\n  async getNetwork() {\n    if (!this.network) {\n      throw new AdapterError(\"No network configured.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getNetwork\" });\n    }\n    return this.network;\n  }\n  async getBalance(account) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getBalance\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const address = account || (await this.getAccounts())[0];\n      if (!address) {\n        throw new AdapterError(\"No account available.\", { code: WalletErrorCode.AccountUnavailable, methodName: \"getBalance\" });\n      }\n      const balanceWei = await provider.getBalance(address);\n      const networkConfig = await this.getNetwork();\n      this.decimals = networkConfig.decimals || 18;\n      return {\n        amount: balanceWei.toString(),\n        decimals: this.decimals,\n        symbol: networkConfig.ticker || \"ETH\",\n        formattedAmount: ethers__WEBPACK_IMPORTED_MODULE_8__.formatUnits(balanceWei, this.decimals)\n      };\n    } catch (error) {\n      throw new AdapterError(`Failed to get balance: ${error.message}`, { cause: error, code: WalletErrorCode.NetworkError, methodName: \"getBalance\" });\n    }\n  }\n  // --- Signing Methods ---\n  async signMessage(message) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signMessage\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      return await signer.signMessage(message);\n    } catch (error) {\n      const messageText = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.SigningFailed;\n      if (messageText.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to sign message: ${messageText}`, { cause: error, code, methodName: \"signMessage\" });\n    }\n  }\n  async signTransaction(tx) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signTransaction\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      const preparedTx = await this.prepareTransactionRequest(tx);\n      return await signer.signTransaction(preparedTx);\n    } catch (error) {\n      const message = error.shortMessage || error.message || String(error);\n      throw new AdapterError(`Failed to sign transaction: ${message}`, { cause: error, code: WalletErrorCode.SignatureFailed, methodName: \"signTransaction\" });\n    }\n  }\n  async signTypedData(data) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signTypedData\" });\n    }\n    try {\n      const network = await this.getNetwork();\n      if (!network) {\n        throw new AdapterError(\"Network not found.\", { code: WalletErrorCode.NetworkError, methodName: \"signTypedData\" });\n      }\n      EIP712Validator.validateStructure(data);\n      EIP712Validator.validateTypes(data.types);\n      EIP712Validator.validateDomain(data.domain, network.chainId.toString());\n      const signer = await this.getSigner();\n      const signature = await signer.signTypedData(data.domain, data.types, data.value);\n      return signature;\n    } catch (error) {\n      const message = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.SigningFailed;\n      if (message.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to sign typed data: ${message}`, { cause: error, code, methodName: \"signTypedData\" });\n    }\n  }\n  async verifySignature(message, signature, address) {\n    if (!ethers__WEBPACK_IMPORTED_MODULE_6__.isAddress(address)) {\n      throw new AdapterError(\"Invalid address format.\", { code: WalletErrorCode.InvalidInput, methodName: \"verifySignature\" });\n    }\n    try {\n      if (typeof message === \"object\" && \"domain\" in message) {\n        return EIP712Validator.verifySignature(message, signature, address);\n      } else {\n        const recoveredAddress = ethers__WEBPACK_IMPORTED_MODULE_9__.verifyMessage(message, signature);\n        return recoveredAddress.toLowerCase() === address.toLowerCase();\n      }\n    } catch (error) {\n      console.error(`[${this.name}] Signature verification failed:`, error);\n      return false;\n    }\n  }\n  // --- Transaction Methods ---\n  async getNonce(type = \"pending\") {\n    const signer = await this.getSigner();\n    return signer.getNonce(type);\n  }\n  async sendTransaction(tx) {\n    console.log(\"SENDING THIS TX FROM THE CLIENT ...\", tx);\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"sendTransaction\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      const txRequest = await this.prepareTransactionRequest(tx);\n      console.log(\"SENDING THIS TX FROM prepareTransactionRequest ...\", txRequest);\n      const response = await signer.sendTransaction(txRequest);\n      return response.hash;\n    } catch (error) {\n      const message = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.TransactionFailed;\n      if (message.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to send transaction: ${message}`, { cause: error, code, methodName: \"sendTransaction\" });\n    }\n  }\n  async getTransactionReceipt(txHash) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getTransactionReceipt\" });\n    }\n    const provider = await this.getProvider();\n    return provider.getTransactionReceipt(txHash);\n  }\n  async callContract(options) {\n    if (!this.isConnected())\n      throw new AdapterError(\"Wallet not connected.\");\n    const provider = await this.getProvider();\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(options.abi);\n    const data = iface.encodeFunctionData(options.method, options.args || []);\n    const rawResult = await provider.call({\n      to: options.contractAddress,\n      data\n    });\n    return iface.decodeFunctionResult(options.method, rawResult);\n  }\n  async writeContract(options) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"writeContract\" });\n    }\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(options.abi);\n    const data = iface.encodeFunctionData(options.method, options.args || []);\n    const tx = {\n      to: options.contractAddress,\n      data,\n      value: options.value?.toString(),\n      options: options.overrides\n    };\n    return this.sendTransaction(tx);\n  }\n  // --- Gas & Fee Methods ---\n  async estimateGas(tx) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"estimateGas\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const signer = await this.getSigner();\n      const fromAddress = await signer.getAddress();\n      const txRequest = {\n        to: tx.to,\n        value: tx.value ? toWei(tx.value, this.decimals) : void 0,\n        data: tx.data ? typeof tx.data === \"string\" ? tx.data : ethers__WEBPACK_IMPORTED_MODULE_5__.hexlify(tx.data) : void 0,\n        from: fromAddress\n      };\n      const gasLimit = await provider.estimateGas(txRequest);\n      const feeData = await provider.getFeeData();\n      return {\n        gasLimit,\n        gasPrice: feeData.gasPrice?.toString(),\n        maxFeePerGas: feeData.maxFeePerGas?.toString(),\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas?.toString()\n      };\n    } catch (error) {\n      throw new AdapterError(`Failed to estimate gas: ${error.message}`, {\n        cause: error,\n        code: WalletErrorCode.GasEstimationFailed,\n        methodName: \"estimateGas\"\n      });\n    }\n  }\n  async getGasPrice() {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getGasPrice\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const feeData = await provider.getFeeData();\n      if (feeData.gasPrice) {\n        return feeData.gasPrice;\n      } else if (feeData.maxFeePerGas) {\n        return feeData.maxFeePerGas;\n      } else {\n        throw new AdapterError(\"Gas price not available from any source.\");\n      }\n    } catch (error) {\n      throw new AdapterError(`Failed to get gas price: ${error.message}`, {\n        cause: error,\n        code: WalletErrorCode.GasEstimationFailed,\n        methodName: \"getGasPrice\"\n      });\n    }\n  }\n  // --- Protected Helper Methods ---\n  async getProvider() {\n    if (!this.provider) {\n      throw new AdapterError(\"Provider not set.\", { code: WalletErrorCode.ProviderNotFound });\n    }\n    return this.provider;\n  }\n  async getSigner() {\n    if (!this.isConnected() || !this.wallet) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected });\n    }\n    return this.wallet;\n  }\n  async prepareTransactionRequest(tx) {\n    const signer = await this.getSigner();\n    const provider = await this.getProvider();\n    const txRequest = {\n      to: tx.to,\n      value: tx.value ? toWei(tx.value, this.decimals) : void 0,\n      data: tx.data ? typeof tx.data === \"string\" ? tx.data : ethers__WEBPACK_IMPORTED_MODULE_5__.hexlify(tx.data) : void 0,\n      nonce: tx.options?.nonce,\n      chainId: tx.options?.chainId ? toBigInt(tx.options.chainId) : void 0\n    };\n    if (tx.options?.gasLimit)\n      txRequest.gasLimit = BigInt(tx.options.gasLimit);\n    if (tx.options?.gasPrice)\n      txRequest.gasPrice = BigInt(tx.options.gasPrice);\n    if (tx.options?.maxFeePerGas)\n      txRequest.maxFeePerGas = BigInt(tx.options.maxFeePerGas);\n    if (tx.options?.maxPriorityFeePerGas)\n      txRequest.maxPriorityFeePerGas = BigInt(tx.options.maxPriorityFeePerGas);\n    if (!txRequest.gasLimit) {\n      txRequest.gasLimit = await provider.estimateGas(txRequest);\n    }\n    if (txRequest.nonce === void 0) {\n      txRequest.nonce = await signer.getNonce(\"pending\");\n    }\n    Object.keys(txRequest).forEach((key) => txRequest[key] === void 0 && delete txRequest[key]);\n    return txRequest;\n  }\n};\n\n// packages/wallet/dist/adapters/ethers/ethersWallet.registration.js\n\nvar ethersOptionsSchema = joi__WEBPACK_IMPORTED_MODULE_11__.object({\n  privateKey: joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^0x[a-fA-F0-9]{64}$/).description(\"Private key for wallet (generates random if not provided)\"),\n  provider: joi__WEBPACK_IMPORTED_MODULE_11__.object({\n    name: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Real Chain name\"),\n    chainId: joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^0x[0-9a-fA-F]+$/).required().description(\"Hex chain ID (e.g., 0xaa36a7)\"),\n    rpcUrls: joi__WEBPACK_IMPORTED_MODULE_11__.array().items(joi__WEBPACK_IMPORTED_MODULE_11__.string().uri({ scheme: [\"https\"] }).required()).min(1).required().description(\"Array of HTTPS RPC URLs\"),\n    displayName: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Wallet display label for the chain\")\n  }).optional().description(\"Optional provider configuration\"),\n  multiChainRpcs: joi__WEBPACK_IMPORTED_MODULE_11__.object().pattern(joi__WEBPACK_IMPORTED_MODULE_11__.alternatives().try(\n    joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^0x[0-9a-fA-F]+$/),\n    // Hex chain ID\n    joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^\\d+$/)\n    // Decimal chain ID\n  ), joi__WEBPACK_IMPORTED_MODULE_11__.array().items(joi__WEBPACK_IMPORTED_MODULE_11__.string().uri({ scheme: [\"https\", \"http\"] })).min(1).description(\"Array of RPC URLs for this chain\")).optional().description(\"Multi-chain RPC configuration - maps chain IDs to RPC URL arrays\")\n});\nvar ethersRequirements = getRequirements(ethersOptionsSchema, \"ethers\");\nvar ethersEnvironment = getEnvironments(\"ethers\", [RuntimeEnvironment.SERVER, RuntimeEnvironment.BROWSER], [\n  \"Browser environments should use secure key sources (hardware wallets, secure storage)\",\n  \"Consider Web3Auth adapter for OAuth-based browser authentication flows\"\n], [\n  \"Private keys are processed during wallet creation but not stored persistently\",\n  \"Server environments provide better security for sensitive private key operations\",\n  \"Browser usage requires secure private key handling by the application\"\n]);\nvar ethersFeatures = getFeatures(EvmWalletAdapter);\nvar adapterMetadata = {\n  name: \"ethers\",\n  version: \"1.0.0\",\n  module: \"wallet\",\n  adapterType: WalletType.evm,\n  adapterClass: EvmWalletAdapter,\n  capabilities: [\n    Capability.CoreWallet,\n    Capability.EventEmitter,\n    Capability.MessageSigner,\n    Capability.TransactionHandler,\n    Capability.TypedDataSigner,\n    Capability.GasEstimation,\n    Capability.TokenOperations,\n    Capability.RPCHandler,\n    Capability.TransactionStatus,\n    Capability.AdapterLifecycle\n  ],\n  requirements: ethersRequirements,\n  environment: ethersEnvironment,\n  features: ethersFeatures\n};\nregistry.registerAdapter(\"wallet\", adapterMetadata);\nvar compatibilityMatrix = getStaticCompatibilityMatrix(\"wallet\", \"ethers\", \"1.0.0\");\nif (compatibilityMatrix) {\n  registry.registerCompatibilityMatrix(\"wallet\", compatibilityMatrix);\n}\nconsole.log(\"\\u2705 Ethers wallet adapter registered with static compatibility matrix\");\nconsole.log(\"\\u{1F4CB} Generated requirements:\", ethersRequirements);\nconsole.log(\"\\u{1F30D} Generated environment:\", ethersEnvironment);\nconsole.log(\"\\u{1F527} Generated features:\", ethersFeatures.map((f) => f.name));\n\n// packages/wallet/dist/adapters/web3auth/web3authWallet.js\n\n\n\n\n\nvar Web3AuthWalletAdapter = class _Web3AuthWalletAdapter {\n  // NEW: Add local network state\n  constructor(args) {\n    __publicField(this, \"name\");\n    __publicField(this, \"version\");\n    __publicField(this, \"web3auth\", null);\n    __publicField(this, \"config\");\n    __publicField(this, \"initialized\", false);\n    __publicField(this, \"decimals\", 18);\n    __publicField(this, \"eventListeners\", /* @__PURE__ */ new Map());\n    __publicField(this, \"multiChainRpcs\", {});\n    __publicField(this, \"network\", null);\n    this.name = args.name;\n    this.version = args.version;\n    this.config = args;\n    this.multiChainRpcs = args.options.multiChainRpcs || {};\n  }\n  /**\n   * Factory method to create and initialize an instance of Web3AuthWalletAdapter.\n   */\n  static async create(args) {\n    const instance = new _Web3AuthWalletAdapter(args);\n    await instance.initialize();\n    return instance;\n  }\n  // --- Core Lifecycle & Connection Methods ---\n  async initialize() {\n    if (this.initialized)\n      return;\n    const opts = this.config.options.web3authConfig;\n    if (!opts) {\n      throw new AdapterError(\"web3authConfig is missing.\", { code: WalletErrorCode.MissingConfig });\n    }\n    try {\n      const privateKeyProvider = opts.privateKeyProvider || new _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_12__.EthereumPrivateKeyProvider({ config: { chainConfig: opts.chainConfig } });\n      this.web3auth = new _web3auth_no_modal__WEBPACK_IMPORTED_MODULE_13__.Web3AuthNoModal({\n        clientId: opts.clientId,\n        web3AuthNetwork: opts.web3AuthNetwork,\n        chainConfig: opts.chainConfig,\n        privateKeyProvider\n      });\n      const authAdapter = new _web3auth_auth_adapter__WEBPACK_IMPORTED_MODULE_14__.AuthAdapter({ adapterSettings: { loginConfig: opts.loginConfig } });\n      this.web3auth.configureAdapter(authAdapter);\n      await this.web3auth.init();\n      this.initialized = true;\n    } catch (error) {\n      throw new AdapterError(\"Web3Auth initialization failed.\", { cause: error, code: WalletErrorCode.InitializationFailed });\n    }\n  }\n  async disconnect() {\n    if (this.web3auth && this.web3auth.connected) {\n      await this.web3auth.logout();\n    }\n    this.web3auth = null;\n    this.initialized = false;\n    this.eventListeners.clear();\n    this.emitEvent(\"disconnect\", void 0);\n  }\n  isConnected() {\n    return this.initialized && !!this.web3auth?.connected;\n  }\n  isInitialized() {\n    return this.initialized;\n  }\n  /**\n  * Get ALL configured RPC URLs for ALL chains\n  */\n  getAllChainRpcs() {\n    return { ...this.multiChainRpcs };\n  }\n  /**\n   * Update ALL RPC configurations at once\n   */\n  async updateAllChainRpcs(multiChainRpcs) {\n    if (!multiChainRpcs || typeof multiChainRpcs !== \"object\") {\n      throw new AdapterError(\"Invalid RPC configuration - must be an object\", {\n        code: WalletErrorCode.InvalidInput,\n        methodName: \"updateAllChainRpcs\"\n      });\n    }\n    for (const [chainId, rpcUrls] of Object.entries(multiChainRpcs)) {\n      if (!Array.isArray(rpcUrls)) {\n        throw new AdapterError(`Invalid RPC URLs for chain ${chainId} - must be array`, {\n          code: WalletErrorCode.InvalidInput,\n          methodName: \"updateAllChainRpcs\"\n        });\n      }\n      if (rpcUrls.length === 0) {\n        throw new AdapterError(`Invalid RPC URLs for chain ${chainId} - array cannot be empty`, {\n          code: WalletErrorCode.InvalidInput,\n          methodName: \"updateAllChainRpcs\"\n        });\n      }\n      for (const url of rpcUrls) {\n        if (typeof url !== \"string\" || !url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n          throw new AdapterError(`Invalid RPC URL for chain ${chainId}: ${url} - must be HTTP/HTTPS URL`, {\n            code: WalletErrorCode.InvalidInput,\n            methodName: \"updateAllChainRpcs\"\n          });\n        }\n      }\n    }\n    this.multiChainRpcs = { ...multiChainRpcs };\n    console.log(`[Web3AuthWalletAdapter] Updated all chain RPCs for ${Object.keys(multiChainRpcs).length} chains`);\n  }\n  async setProvider(config) {\n    if (!this.isConnected() || !this.web3auth) {\n      throw new AdapterError(\"Not connected.\", { code: WalletErrorCode.WalletNotConnected });\n    }\n    const newChainIdHex = config.chainId.startsWith(\"0x\") ? config.chainId : `0x${parseInt(config.chainId, 10).toString(16)}`;\n    const cid = config.chainId;\n    const cidDecimal = parseInt(newChainIdHex, 16).toString();\n    const preferred = this.multiChainRpcs[cid] || this.multiChainRpcs[cidDecimal] || this.multiChainRpcs[newChainIdHex] || [];\n    const networkHelper = NetworkHelper.getInstance();\n    await networkHelper.ensureInitialized();\n    let finalConfig;\n    try {\n      const enhancedConfig = await networkHelper.getNetworkConfig(cid, preferred, false);\n      finalConfig = enhancedConfig || config;\n    } catch (error) {\n      console.warn(`[Web3AuthWalletAdapter] NetworkHelper failed, using original config:`, error);\n      finalConfig = config;\n    }\n    if (!finalConfig.rpcUrls || finalConfig.rpcUrls.length === 0) {\n      if (preferred.length > 0) {\n        finalConfig = { ...finalConfig, rpcUrls: preferred };\n      } else {\n        throw new AdapterError(`No RPC URLs available for chain ${newChainIdHex}`, {\n          code: WalletErrorCode.ConnectionFailed,\n          methodName: \"setProvider\"\n        });\n      }\n    }\n    try {\n      await this.web3auth.switchChain({ chainId: newChainIdHex });\n    } catch (switchError) {\n      if (switchError.code === 4902 || switchError.message?.includes(\"Unrecognized chain ID\") || switchError.message?.includes(\"Chain config has not been added\")) {\n        try {\n          console.log(`[Web3AuthWalletAdapter] Adding chain ${newChainIdHex} to Web3Auth`);\n          const chainToAdd = {\n            chainId: newChainIdHex,\n            chainNamespace: \"eip155\",\n            displayName: finalConfig.displayName || finalConfig.name,\n            rpcTarget: finalConfig.rpcUrls[0],\n            // ✅ Use the proper RPC URL\n            blockExplorerUrl: finalConfig.blockExplorerUrl,\n            ticker: finalConfig.ticker || \"ETH\",\n            tickerName: finalConfig.tickerName || \"Ethereum\"\n          };\n          await this.web3auth.addChain(chainToAdd);\n          console.log(`[Web3AuthWalletAdapter] \\u2705 Successfully added chain ${newChainIdHex}`);\n          await this.web3auth.switchChain({ chainId: newChainIdHex });\n          console.log(`[Web3AuthWalletAdapter] \\u2705 Successfully switched to chain ${newChainIdHex}`);\n        } catch (addError) {\n          throw new AdapterError(`Failed to add or switch to chain ${newChainIdHex}: ${addError.message}`, {\n            cause: addError,\n            code: WalletErrorCode.ConnectionFailed,\n            methodName: \"setProvider\"\n          });\n        }\n      } else {\n        throw new AdapterError(`Failed to switch chain ${newChainIdHex}: ${switchError.message}`, {\n          cause: switchError,\n          code: WalletErrorCode.ConnectionFailed,\n          methodName: \"setProvider\"\n        });\n      }\n    }\n    this.network = null;\n    const network = await this.getNetwork();\n    this.network = network;\n    this.decimals = network.decimals || 18;\n    this.emitEvent(\"chainChanged\", network.chainId);\n  }\n  // --- Event Handling ---\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, /* @__PURE__ */ new Set());\n    }\n    this.eventListeners.get(event).add(callback);\n  }\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).delete(callback);\n    }\n  }\n  emitEvent(eventName, payload) {\n    const listeners = this.eventListeners.get(eventName);\n    if (listeners && listeners.size > 0) {\n      listeners.forEach((callback) => {\n        try {\n          callback(payload);\n        } catch (error) {\n          console.error(`[${this.name}] Error in ${eventName} event handler:`, error);\n        }\n      });\n    }\n  }\n  // --- Wallet Information & State ---\n  async getAccounts() {\n    if (!this.isConnected()) {\n      const loginProvider = Object.keys(this.config.options.web3authConfig.loginConfig)[0];\n      if (!loginProvider) {\n        throw new AdapterError(\"No login providers configured.\", { code: WalletErrorCode.MissingConfig });\n      }\n      await this.web3auth?.connectTo(_web3auth_base__WEBPACK_IMPORTED_MODULE_15__.WALLET_ADAPTERS.AUTH, { loginProvider });\n      if (!this.web3auth?.connected || !this.web3auth.provider) {\n        throw new AdapterError(\"Failed to connect to Web3Auth.\", { code: WalletErrorCode.ConnectionFailed });\n      }\n      const network = await this.getNetwork();\n      this.network = network;\n      this.emitEvent(\"connect\", { chainId: network.chainId });\n    }\n    const accounts = await this.web3auth?.provider?.request({ method: \"eth_accounts\" });\n    this.emitEvent(\"accountsChanged\", accounts);\n    return accounts;\n  }\n  async getNetwork() {\n    if (!this.isConnected() || !this.web3auth?.provider) {\n      throw new AdapterError(\"Not connected.\", { code: WalletErrorCode.WalletNotConnected });\n    }\n    if (this.network) {\n      return this.network;\n    }\n    const provider = await this.getProvider();\n    const network = await provider.getNetwork();\n    const chainId = `0x${network.chainId.toString(16)}`;\n    const networkHelper = NetworkHelper.getInstance();\n    await networkHelper.ensureInitialized();\n    const config = await networkHelper.getNetworkConfig(chainId);\n    const finalConfig = config ?? {\n      chainId,\n      name: network.name,\n      displayName: network.name,\n      rpcUrls: [provider?.connection?.url || \"\"].filter(Boolean),\n      decimals: 18,\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n    this.network = finalConfig;\n    return finalConfig;\n  }\n  async getBalance(account) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getBalance\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const address = account || (await this.getAccounts())[0];\n      if (!address) {\n        throw new AdapterError(\"No account available.\", { code: WalletErrorCode.AccountUnavailable, methodName: \"getBalance\" });\n      }\n      const balanceWei = await provider.getBalance(address);\n      const networkConfig = await this.getNetwork();\n      this.decimals = networkConfig.decimals || 18;\n      return {\n        amount: balanceWei.toString(),\n        decimals: this.decimals,\n        symbol: networkConfig.ticker || \"ETH\",\n        formattedAmount: ethers__WEBPACK_IMPORTED_MODULE_8__.formatUnits(balanceWei, this.decimals)\n      };\n    } catch (error) {\n      throw new AdapterError(`Failed to get balance: ${error.message}`, { cause: error, code: WalletErrorCode.NetworkError, methodName: \"getBalance\" });\n    }\n  }\n  // --- Signing Methods ---\n  async signMessage(message) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signMessage\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      return await signer.signMessage(message);\n    } catch (error) {\n      const messageText = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.SigningFailed;\n      if (messageText.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to sign message: ${messageText}`, { cause: error, code, methodName: \"signMessage\" });\n    }\n  }\n  async signTransaction(tx) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signTransaction\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      const preparedTx = await this.prepareTransactionRequest(tx);\n      return await signer.signTransaction(preparedTx);\n    } catch (error) {\n      const message = error.shortMessage || error.message || String(error);\n      throw new AdapterError(`Failed to sign transaction: ${message}`, { cause: error, code: WalletErrorCode.SignatureFailed, methodName: \"signTransaction\" });\n    }\n  }\n  async signTypedData(data) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"signTypedData\" });\n    }\n    try {\n      EIP712Validator.validateStructure(data);\n      EIP712Validator.validateTypes(data.types);\n      const network = await this.getNetwork();\n      EIP712Validator.validateDomain(data.domain, network.chainId.toString());\n      const signer = await this.getSigner();\n      const signature = await signer.signTypedData(data.domain, data.types, data.value);\n      return signature;\n    } catch (error) {\n      if (error instanceof AdapterError) {\n        throw error;\n      }\n      const message = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.SigningFailed;\n      if (message.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to sign typed data: ${message}`, { cause: error, code, methodName: \"signTypedData\" });\n    }\n  }\n  async verifySignature(message, signature, address) {\n    if (!ethers__WEBPACK_IMPORTED_MODULE_6__.isAddress(address)) {\n      throw new AdapterError(\"Invalid address format.\", { code: WalletErrorCode.InvalidInput, methodName: \"verifySignature\" });\n    }\n    try {\n      if (typeof message === \"object\" && \"domain\" in message) {\n        return EIP712Validator.verifySignature(message, signature, address);\n      } else {\n        const recoveredAddress = ethers__WEBPACK_IMPORTED_MODULE_9__.verifyMessage(message, signature);\n        return recoveredAddress.toLowerCase() === address.toLowerCase();\n      }\n    } catch (error) {\n      console.error(`[${this.name}] Signature verification failed:`, error);\n      return false;\n    }\n  }\n  // --- Transaction Methods ---\n  async getNonce(type = \"pending\") {\n    const signer = await this.getSigner();\n    return signer.getNonce(type);\n  }\n  async sendTransaction(tx) {\n    console.log(\"SENDING THIS TX FROM THE CLIENT ...\", tx);\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"sendTransaction\" });\n    }\n    try {\n      const signer = await this.getSigner();\n      const txRequest = await this.prepareTransactionRequest(tx);\n      console.log(\"SENDING THIS TX FROM prepareTransactionRequest ...\", txRequest);\n      const response = await signer.sendTransaction(txRequest);\n      return response.hash;\n    } catch (error) {\n      const message = error.shortMessage || error.message || String(error);\n      let code = WalletErrorCode.TransactionFailed;\n      if (message.toLowerCase().includes(\"user denied\"))\n        code = WalletErrorCode.UserRejected;\n      throw new AdapterError(`Failed to send transaction: ${message}`, { cause: error, code, methodName: \"sendTransaction\" });\n    }\n  }\n  async getTransactionReceipt(txHash) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getTransactionReceipt\" });\n    }\n    const provider = await this.getProvider();\n    return provider.getTransactionReceipt(txHash);\n  }\n  async callContract(options) {\n    if (!this.isConnected())\n      throw new AdapterError(\"Wallet not connected.\");\n    const provider = await this.getProvider();\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(options.abi);\n    const data = iface.encodeFunctionData(options.method, options.args || []);\n    const rawResult = await provider.call({\n      to: options.contractAddress,\n      data\n    });\n    return iface.decodeFunctionResult(options.method, rawResult);\n  }\n  async writeContract(options) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"writeContract\" });\n    }\n    const iface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(options.abi);\n    const data = iface.encodeFunctionData(options.method, options.args || []);\n    const tx = {\n      to: options.contractAddress,\n      data,\n      value: options.value?.toString(),\n      options: options.overrides\n    };\n    return this.sendTransaction(tx);\n  }\n  // --- Gas & Fee Methods ---\n  async estimateGas(tx) {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"estimateGas\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const signer = await this.getSigner();\n      const fromAddress = await signer.getAddress();\n      const txRequest = {\n        to: tx.to,\n        value: tx.value ? toWei(tx.value, this.decimals) : void 0,\n        data: tx.data ? typeof tx.data === \"string\" ? tx.data : ethers__WEBPACK_IMPORTED_MODULE_5__.hexlify(tx.data) : void 0,\n        from: fromAddress\n      };\n      const gasLimit = await provider.estimateGas(txRequest);\n      const feeData = await provider.getFeeData();\n      return {\n        gasLimit,\n        gasPrice: feeData.gasPrice?.toString(),\n        maxFeePerGas: feeData.maxFeePerGas?.toString(),\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas?.toString()\n      };\n    } catch (error) {\n      throw new AdapterError(`Failed to estimate gas: ${error.message}`, {\n        cause: error,\n        code: WalletErrorCode.GasEstimationFailed,\n        methodName: \"estimateGas\"\n      });\n    }\n  }\n  async getGasPrice() {\n    if (!this.isConnected()) {\n      throw new AdapterError(\"Wallet not connected.\", { code: WalletErrorCode.WalletNotConnected, methodName: \"getGasPrice\" });\n    }\n    try {\n      const provider = await this.getProvider();\n      const feeData = await provider.getFeeData();\n      if (feeData.gasPrice) {\n        return feeData.gasPrice;\n      } else if (feeData.maxFeePerGas) {\n        return feeData.maxFeePerGas;\n      } else {\n        throw new AdapterError(\"Gas price not available from any source.\");\n      }\n    } catch (error) {\n      throw new AdapterError(`Failed to get gas price: ${error.message}`, {\n        cause: error,\n        code: WalletErrorCode.GasEstimationFailed,\n        methodName: \"getGasPrice\"\n      });\n    }\n  }\n  // --- Protected Helper Methods ---\n  async getProvider() {\n    if (!this.web3auth?.provider) {\n      throw new AdapterError(\"Provider not available from Web3Auth.\", { code: WalletErrorCode.ProviderNotFound });\n    }\n    return new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(this.web3auth.provider);\n  }\n  async getSigner() {\n    const provider = await this.getProvider();\n    const accounts = await this.getAccounts();\n    if (accounts.length === 0) {\n      throw new AdapterError(\"No accounts available to create signer.\", { code: WalletErrorCode.AccountUnavailable });\n    }\n    return provider.getSigner(accounts[0]);\n  }\n  async prepareTransactionRequest(tx) {\n    const signer = await this.getSigner();\n    const provider = await this.getProvider();\n    const txRequest = {\n      to: tx.to,\n      value: tx.value ? toWei(tx.value, this.decimals) : void 0,\n      data: tx.data ? typeof tx.data === \"string\" ? tx.data : ethers__WEBPACK_IMPORTED_MODULE_5__.hexlify(tx.data) : void 0,\n      nonce: tx.options?.nonce,\n      chainId: tx.options?.chainId ? toBigInt(tx.options.chainId) : void 0\n    };\n    if (tx.options?.gasLimit)\n      txRequest.gasLimit = BigInt(tx.options.gasLimit);\n    if (tx.options?.gasPrice)\n      txRequest.gasPrice = BigInt(tx.options.gasPrice);\n    if (tx.options?.maxFeePerGas)\n      txRequest.maxFeePerGas = BigInt(tx.options.maxFeePerGas);\n    if (tx.options?.maxPriorityFeePerGas)\n      txRequest.maxPriorityFeePerGas = BigInt(tx.options.maxPriorityFeePerGas);\n    if (!txRequest.gasLimit) {\n      txRequest.gasLimit = await provider.estimateGas(txRequest);\n    }\n    if (txRequest.nonce === void 0) {\n      txRequest.nonce = await signer.getNonce(\"pending\");\n    }\n    Object.keys(txRequest).forEach((key) => txRequest[key] === void 0 && delete txRequest[key]);\n    return txRequest;\n  }\n};\n\n// packages/wallet/dist/adapters/web3auth/web3authWallet.registration.js\n\nvar web3AuthOptionsSchema = joi__WEBPACK_IMPORTED_MODULE_11__.object({\n  web3authConfig: joi__WEBPACK_IMPORTED_MODULE_11__.object({\n    clientId: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Your Web3Auth Client ID\"),\n    web3AuthNetwork: joi__WEBPACK_IMPORTED_MODULE_11__.string().valid(\"sapphire_mainnet\", \"sapphire_devnet\", \"testnet\").required().description(\"Web3Auth Network environment\"),\n    chainConfig: joi__WEBPACK_IMPORTED_MODULE_11__.object({\n      chainNamespace: joi__WEBPACK_IMPORTED_MODULE_11__.string().default(\"eip155\"),\n      chainId: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Blockchain chain ID (hexadecimal)\"),\n      rpcTarget: joi__WEBPACK_IMPORTED_MODULE_11__.string().uri().required().description(\"RPC endpoint URL\"),\n      displayName: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Network display name\"),\n      blockExplorerUrl: joi__WEBPACK_IMPORTED_MODULE_11__.string().uri().required().description(\"Block explorer URL\"),\n      ticker: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Native token ticker (e.g., ETH)\"),\n      tickerName: joi__WEBPACK_IMPORTED_MODULE_11__.string().required().description(\"Native token name (e.g., Ethereum)\")\n    }).required().description(\"Blockchain configuration\"),\n    loginConfig: joi__WEBPACK_IMPORTED_MODULE_11__.object().required().description(\"OAuth provider configuration\"),\n    privateKeyProvider: joi__WEBPACK_IMPORTED_MODULE_11__.any().optional().description(\"Optional private key provider\")\n  }).required().description(\"Web3Auth configuration object\"),\n  // ✅ NEW: Add multiChainRpcs option (same as ethers)\n  multiChainRpcs: joi__WEBPACK_IMPORTED_MODULE_11__.object().pattern(joi__WEBPACK_IMPORTED_MODULE_11__.alternatives().try(\n    joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^0x[0-9a-fA-F]+$/),\n    // Hex chain ID\n    joi__WEBPACK_IMPORTED_MODULE_11__.string().pattern(/^\\d+$/)\n    // Decimal chain ID\n  ), joi__WEBPACK_IMPORTED_MODULE_11__.array().items(joi__WEBPACK_IMPORTED_MODULE_11__.string().uri({ scheme: [\"https\", \"http\"] })).min(1).description(\"Array of RPC URLs for this chain\")).optional().description(\"Multi-chain RPC configuration - maps chain IDs to RPC URL arrays\")\n});\nvar web3authRequirements = getRequirements(web3AuthOptionsSchema, \"web3auth\");\nvar web3authEnvironment = getEnvironments(\n  \"web3auth\",\n  [RuntimeEnvironment.BROWSER],\n  // Browser only\n  [\n    \"Requires browser environment with Web3Auth SDK\",\n    \"Cannot be used in Node.js server environments\",\n    \"Requires user interaction for OAuth flows\"\n  ],\n  [\n    \"Web3Auth handles private key generation securely\",\n    \"OAuth-based authentication provides better UX\",\n    \"Private keys reconstructed in memory only\"\n  ]\n);\nvar web3authFeatures = getFeatures(Web3AuthWalletAdapter);\nvar adapterMetadata2 = {\n  name: \"web3auth\",\n  version: \"1.0.0\",\n  module: \"wallet\",\n  adapterType: WalletType.web3auth,\n  adapterClass: Web3AuthWalletAdapter,\n  /** ✅ ADD: Define the capabilities this adapter implements. */\n  capabilities: [\n    Capability.CoreWallet,\n    Capability.EventEmitter,\n    Capability.MessageSigner,\n    Capability.TransactionHandler,\n    Capability.TypedDataSigner,\n    Capability.GasEstimation,\n    Capability.TokenOperations,\n    Capability.RPCHandler,\n    Capability.TransactionStatus,\n    Capability.AdapterLifecycle\n  ],\n  requirements: web3authRequirements,\n  environment: web3authEnvironment,\n  features: web3authFeatures\n};\nregistry.registerAdapter(\"wallet\", adapterMetadata2);\nvar compatibilityMatrix2 = getStaticCompatibilityMatrix(\"wallet\", \"web3auth\", \"1.0.0\");\nif (compatibilityMatrix2) {\n  registry.registerCompatibilityMatrix(\"wallet\", compatibilityMatrix2);\n}\nconsole.log(\"\\u2705 Web3Auth wallet adapter registered with static compatibility matrix\");\nconsole.log(\"\\u{1F4CB} Generated requirements:\", web3authRequirements);\nconsole.log(\"\\u{1F30D} Generated environment:\", web3authEnvironment);\nconsole.log(\"\\u{1F527} Generated features:\", web3authFeatures.map((f) => f.name));\n\n// packages/wallet/dist/index.js\nregistry.registerModule({ name: \"wallet\", version: package_default.version });\nregistry.registerInterfaceShape(\"IEVMWallet\", [\n  Capability.CoreWallet,\n  Capability.EventEmitter,\n  Capability.MessageSigner,\n  Capability.TransactionHandler,\n  Capability.TypedDataSigner,\n  Capability.GasEstimation,\n  Capability.TokenOperations,\n  Capability.RPCHandler,\n  Capability.TransactionStatus\n]);\nasync function createWallet(params) {\n  const { name, version } = params;\n  try {\n    const adapterInfo = registry.getAdapter(Ms3Modules.wallet, name, version);\n    if (!adapterInfo) {\n      const availableVersions = registry.getAdapterVersions(Ms3Modules.wallet, name);\n      const versionsText = availableVersions.length > 0 ? ` Available versions: ${availableVersions.join(\", \")}` : \"\";\n      throw new AdapterError(`Adapter '${name}' version '${version}' not found for wallet module.${versionsText}`);\n    }\n    if (adapterInfo.environment) {\n      console.log(adapterInfo.environment);\n      validateEnvironment(name, adapterInfo.environment);\n    }\n    const validatorArgs = {\n      moduleName: Ms3Modules.wallet,\n      name,\n      version,\n      // ✅ Add version\n      params,\n      adapterInfo,\n      registry,\n      factoryMethodName: \"createWallet\"\n    };\n    validateAdapterParameters(validatorArgs);\n    const AdapterClass = adapterInfo.adapterClass;\n    if (!AdapterClass || typeof AdapterClass.create !== \"function\") {\n      throw new AdapterError(`Adapter class or its static 'create' method is invalid for '${name}'.`);\n    }\n    const adapter = await AdapterClass.create({\n      name,\n      version,\n      options: params.options\n    });\n    if (!adapter) {\n    }\n    return createErrorHandlingProxy(\n      adapter,\n      adapterInfo.capabilities,\n      // Pass the capabilities\n      adapterInfo.errorMap || {},\n      void 0,\n      `WalletAdapter(${name})`\n    );\n  } catch (error) {\n    if (error instanceof AdapterError) {\n      throw error;\n    }\n    throw new AdapterError(`Adapter '${name}' failed to be created: ${error}`);\n  }\n}\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@m3s/wallet/dist/index.esm.js\n");

/***/ })

};
;